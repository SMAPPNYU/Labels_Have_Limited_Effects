###################################
##### NewsGuard Survey Script #####
###################################
# Written by: Kevin Aslett
# Date: 11/11/2020
#Summary: Pull in data.Trust_Media_w2

#Load in libraries:
library(dplyr)
library(xtable)
library(AER)
library(glmnet)
library(estimatr)
library(huxtable)
library(magrittr)
library(texreg)
library(ivpack)
library(ggplot2)

#Establish current working drive: 
setwd('/Users/kevinaslett/Documents/NewsGuard/Data')


#Read in Wave 1 Data
Wave_1_Data <- read.csv('NYUU0017_w1_OUTPUT.csv')

#Read in Wave 2 Data
Wave_2_Data <- read.csv('NYUU0017_w2_OUTPUT.csv')



#Change the columnnames that were the same in wave 1 and wave 2
colnames(Wave_2_Data)[89:114] <- c('operating_system_w2',
                                   'web_browser_w2',
                                   'device_w2',
                                   'birthyr_w2',
                                   'gender_w2',
                                   'race_w2',
                                   'educ_w2',
                                   'marstat_w2',
                                   'employ_w2',
                                   'faminc_new_w2',
                                   'pid3_w2',
                                   'pid7_w2',
                                   'presvote16post_w2',
                                   'inputzip_w2',
                                   'inputstate_w2',
                                   'region_w2',
                                   'votereg_w2',
                                   'ideo5_w2',
                                   'newsint_w2',
                                   'religpew_w2',
                                   'pew_churatd_w2',
                                   'pew_bornagain_w2',
                                   'pew_religimp_w2',
                                   'pew_prayer_w2',
                                   'startime_w2',
                                   'endtime_w2')

colnames(Wave_2_Data)[1:2] <- c('caseid_w2',
                                'weight_w2')  
colnames(Wave_2_Data)[5] <- c('visa1_w2')                           

#Merge based on caseid in Wave 1 survey and caseid_w1 in Wave 2 Survey
dataframe_1 <- merge(Wave_1_Data,Wave_2_Data,by.x='caseid',by.y='caseid_w1')


#Create income score variable (income_score)
dataframe_1$faminc_new  <- factor(dataframe_1$faminc_new , levels = c("Less than $10,000",
                                                                      "$10,000 - $19,999",
                                                                      "$20,000 - $29,999",
                                                                      "$30,000 - $39,999",
                                                                      "$40,000 - $49,999",
                                                                      "$50,000 - $59,999",
                                                                      "$60,000 - $69,999",
                                                                      "$70,000 - $79,999",
                                                                      "$80,000 - $89,999",
                                                                      "$90,000 - $99,999",
                                                                      "$100,000 - $119,999",
                                                                      "$120,000 - $149,999",
                                                                      "$150,000 - $199,999",
                                                                      "$200,000 - $249,999",
                                                                      "$250,000 - $349,999",
                                                                      "$350,000 - $499,999",
                                                                      "$500,000 or more"))
dataframe_1$income_score  <- as.numeric(dataframe_1$faminc_new)



#Create treatment variable (Treated)
dataframe_1$plugin_treat <- as.character(dataframe_1$plugin_treat)
dataframe_1$Treated <- ifelse(dataframe_1$plugin_treat == 'Offered plug-in',1,0)

#Create political cynicism variable (Wave 1: Pol_cyn_1 ; Wave 2: Pol_cyn_2)
dataframe_1$SM  <- factor(dataframe_1$SM, levels = c("Hardly any",
                                                     "Not very many",
                                                     "Quite a few"))
dataframe_1$Pol_cyn_1  <- as.numeric(dataframe_1$SM)
dataframe_1$SM_w2  <- factor(dataframe_1$SM_w2, levels = c("Hardly any",
                                                           "Not very many",
                                                           "Quite a few"))
dataframe_1$Pol_cyn_2  <- as.numeric(dataframe_1$SM_w2)

##Create affective polarization: variable (Wave 1: aff_pol_w1 ; Wave 2: aff_pol_w2)
dataframe_1$SMP3001 <- as.character(dataframe_1$SMP3001)
dataframe_1$SMP3001 <- as.numeric(dataframe_1$SMP3001)
dataframe_1$SMP3001_w2 <- as.character(dataframe_1$SMP3001_w2)
dataframe_1$SMP3001_w2 <- as.numeric(dataframe_1$SMP3001_w2)
dataframe_1$SMP3002 <- as.character(dataframe_1$SMP3002)
dataframe_1$SMP3002 <- as.numeric(dataframe_1$SMP3002)
dataframe_1$SMP3002_w2 <- as.character(dataframe_1$SMP3002_w2)
dataframe_1$SMP3002_w2 <- as.numeric(dataframe_1$SMP3002_w2)
dataframe_1$aff_pol_w1 <- abs((dataframe_1$SMP3001 - dataframe_1$SMP3002))
dataframe_1$aff_pol_w2 <- abs((dataframe_1$SMP3001_w2 - dataframe_1$SMP3002_w2))
dataframe_1$diff_aff_pol <- abs((dataframe_1$aff_pol_w1 - dataframe_1$aff_pol_w2))
dataframe_1$diff_aff_pol <- as.numeric(dataframe_1$diff_aff_pol)

##Create favorability view of both parties variable (Wave 1: feeling_parties_1 ; Wave 2: feeling_parties_2)

dataframe_1$feeling_parties_1 <- dataframe_1$SMP3001 + dataframe_1$SMP3002
dataframe_1$feeling_parties_2 <- dataframe_1$SMP3001_w2 + dataframe_1$SMP3002_w2


## Create Dummy Variables for the browser that each respondent used (IE_dummy,Chrome_dummy,Firefox_dummy,Safari_dummy):

dataframe_1$web_browser <- as.character(dataframe_1$web_browser)
dataframe_1$IE_dummy <- ifelse(startsWith(dataframe_1$web_browser,'MS'),1,0)
dataframe_1$Chrome_dummy <- ifelse(startsWith(dataframe_1$web_browser,'Chrome'),1,0)
dataframe_1$Firefox_dummy <- ifelse(startsWith(dataframe_1$web_browser,'Firefox'),1,0)
dataframe_1$Safari_dummy <- ifelse(startsWith(dataframe_1$web_browser,'Safari'),1,0)




##Create Variables for the trust of different news producers:

dataframe_1$SMP67007  <- factor(dataframe_1$SMP67007, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$Fox_Trust_1 <- as.numeric(dataframe_1$SMP67007)

dataframe_1$SMP67008  <- factor(dataframe_1$SMP67008, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$CNN_Trust_1 <- as.numeric(dataframe_1$SMP67008)



dataframe_1$SMP67007_w2  <- factor(dataframe_1$SMP67007_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$Fox_Trust_2 <- as.numeric(dataframe_1$SMP67007_w2)

dataframe_1$SMP67008_w2  <- factor(dataframe_1$SMP67008_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$CNN_Trust_2 <- as.numeric(dataframe_1$SMP67008_w2)




dataframe_1$SMP67009  <- factor(dataframe_1$SMP67009, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$MSNBC_Trust_1 <- as.numeric(dataframe_1$SMP67009)

dataframe_1$SMP67010  <- factor(dataframe_1$SMP67010, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$CBS_Trust_1 <- as.numeric(dataframe_1$SMP67010)

max(dataframe_1$CBS_Trust_1,na.rm=T)
min(dataframe_1$CBS_Trust_1,na.rm=T)


dataframe_1$SMP67009_w2  <- factor(dataframe_1$SMP67009_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$MSNBC_Trust_2 <- as.numeric(dataframe_1$SMP67009_w2)

dataframe_1$SMP67010_w2  <- factor(dataframe_1$SMP67010_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$CBS_Trust_2 <- as.numeric(dataframe_1$SMP67010_w2)




dataframe_1$SMP67011  <- factor(dataframe_1$SMP67011, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$ABC_Trust_1 <- as.numeric(dataframe_1$SMP67011)

dataframe_1$SMP67012  <- factor(dataframe_1$SMP67012, levels = c('Not at all',
                                                                 'Not too much',
                                                                 'Some',
                                                                 'A lot'))

dataframe_1$NBC_Trust_1 <- as.numeric(dataframe_1$SMP67012)




dataframe_1$SMP67011_w2  <- factor(dataframe_1$SMP67011_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$ABC_Trust_2 <- as.numeric(dataframe_1$SMP67011_w2)

dataframe_1$SMP67012_w2  <- factor(dataframe_1$SMP67012_w2, levels = c('Not at all',
                                                                       'Not too much',
                                                                       'Some',
                                                                       'A lot'))

dataframe_1$NBC_Trust_2 <- as.numeric(dataframe_1$SMP67012_w2)


##Create variable for digital literacy levels:

dataframe_1[,18]

dl_matrix <- matrix(nrow=nrow(dataframe_1))
for(i in 18:23){
  dataframe_1[,i]  <- factor(dataframe_1[,i], levels = c('No Understanding',
                                                         '2',
                                                         '3',
                                                         '4',
                                                         'Full Understanding'))
  
  dl_matrix <- cbind(dl_matrix,dataframe_1[,i])
}
dl_matrix <- dl_matrix[,-1]

for(i in c(25,26)){
  dataframe_1[,i]  <- factor(dataframe_1[,i], levels = c('Strongly Disagree',
                                                         '-3',
                                                         '-2',
                                                         '-1',
                                                         '0',
                                                         '1',
                                                         '2',
                                                         '3',
                                                         'Strongly Agree'))
  dl_matrix <- cbind(dl_matrix,dataframe_1[,i])
}

for(i in c(24,27)){
  dataframe_1[,i]  <- factor(dataframe_1[,i], levels = c('Strongly Agree',
                                                         '3',
                                                         '2',
                                                         '1',
                                                         '0',
                                                         '-1',
                                                         '-2',
                                                         '-3',
                                                         'Strongly Disagree'))
  dl_matrix <- cbind(dl_matrix,dataframe_1[,i])
}

dl_matrix <- data.frame(dl_matrix)
colnames(dl_matrix) <- c('DL_1','DL_2','DL_3','DL_4','DL_5','DL_6','DL_7','DL_8','DL_9','DL_10')
dl_matrix <- dl_matrix %>% mutate(Total_DL = DL_1 + DL_2 + DL_3 + DL_4 + DL_5 + DL_6 + DL_7 + DL_8 + DL_9 + DL_10)
dataframe_1 <- cbind(dataframe_1,dl_matrix)

#Create Variable for Scientific Misinformation:

dataframe_1$SMP5361  <- factor(dataframe_1$SMP5361, levels = c('Strongly agree',
                                                               'Agree',
                                                               'Neither agree nor disagree',
                                                               'Disagree',
                                                               'Strongly disagree'))


dataframe_1$SMP5362  <- factor(dataframe_1$SMP5362, levels = c('Strongly disagree',
                                                               'Disagree',
                                                               'Neither agree nor disagree',
                                                               'Agree',
                                                               'Strongly agree'))

dataframe_1$SMP5363  <- factor(dataframe_1$SMP5363, levels = c('Strongly disagree',
                                                               'Disagree',
                                                               'Neither agree nor disagree',
                                                               'Agree',
                                                               'Strongly agree'))

dataframe_1$SMP5364  <- factor(dataframe_1$SMP5364, levels = c('Strongly disagree',
                                                               'Disagree',
                                                               'Neither agree nor disagree',
                                                               'Agree',
                                                               'Strongly agree'))

dataframe_1$SMP5361  <- as.numeric(dataframe_1$SMP5364)
dataframe_1$SMP5362  <- as.numeric(dataframe_1$SMP5362)
dataframe_1$SMP5363  <- as.numeric(dataframe_1$SMP5363)
dataframe_1$SMP5364  <- as.numeric(dataframe_1$SMP5364)



dataframe_1 <- dataframe_1 %>% mutate(Total_Science_Misinfo = (SMP5361 + SMP5362 + SMP5363 + SMP5364)/4)


dataframe_1$SMP1019A <- factor(dataframe_1$SMP1019A, levels = c("Never",
                                                                "Less often",
                                                                "Every few weeks",
                                                                "1 to 2 days a week",
                                                                "3 to 6 days a week",
                                                                "About once a day",
                                                                "Several times a day",
                                                                "At least 10 times a day"))



dataframe_1$SMP1019B <- factor(dataframe_1$SMP1019B, levels = c("Never",
                                                                "Less often",
                                                                "Every few weeks",
                                                                "1 to 2 days a week",
                                                                "3 to 6 days a week",
                                                                "About once a day",
                                                                "Several times a day",
                                                                "At least 10 times a day"))



dataframe_1$SMP1020A <- factor(dataframe_1$SMP1020A, levels = c("Never",
                                                                "Less often",
                                                                "Every few weeks",
                                                                "1 to 2 days a week",
                                                                "3 to 6 days a week",
                                                                "About once a day",
                                                                "Several times a day",
                                                                "At least 10 times a day"))


dataframe_1$SMP1020B <- factor(dataframe_1$SMP1020B, levels = c("Never",
                                                                "Less often",
                                                                "Every few weeks",
                                                                "1 to 2 days a week",
                                                                "3 to 6 days a week",
                                                                "About once a day",
                                                                "Several times a day",
                                                                "At least 10 times a day"))


dataframe_1$SMP1019A <- as.numeric(dataframe_1$SMP1019A)
dataframe_1$SMP1020A <- as.numeric(dataframe_1$SMP1020A)
dataframe_1$SMP1019B <- as.numeric(dataframe_1$SMP1019B)
dataframe_1$SMP1020B <- as.numeric(dataframe_1$SMP1020B)


dataframe_1$Twitter_Acct <- ifelse(dataframe_1$SMP1012_18_1 == 'selected',1,0)
dataframe_1$FB_Acct <- ifelse(dataframe_1$SMP1012_18_2 == 'selected',1,0)

dataframe_1$FB_Twitt_Acct <- ifelse(dataframe_1$Twitter_Acct == 1 | dataframe_1$FB_Acct == 1,1,0)



dataframe_1$SMP1019A <- ifelse(dataframe_1$Twitter_Acct == 0,0,dataframe_1$SMP1019A)
dataframe_1$SMP1019B <- ifelse(dataframe_1$Twitter_Acct == 0,0,dataframe_1$SMP1019B)
dataframe_1$SMP1020B <- ifelse(dataframe_1$FB_Acct == 0,0,dataframe_1$SMP1020B)
dataframe_1$SMP1020A <- ifelse(dataframe_1$FB_Acct == 0,0,dataframe_1$SMP1020A)

dataframe_1$Social_Media_Use <- (dataframe_1$SMP1019A + dataframe_1$SMP1020A + dataframe_1$SMP1019B + dataframe_1$SMP1020B)/4



#gender ($Female_i$ dummy) ------------------------------------- gender_dummy_fem
#education level ($Education_i$) ------------------------------- educ_score
#age ($Age_i$) ------------------------------------------------- Age
#age squared ($Age_i^2$) --------------------------------------- Age_Sq
#7-point party id ($Party\_ID_i$) ------------------------------ party_score
#race/ethnicity ($Ethnicity_i$) -------------------------------- race_white
#7-point ideology ($Con\_Ideology_i$) -------------------------- ideo_score
#media trust ($Media\_Trust\_Index_i$) ------------------------- Trust_Media_w1
#social media use ($Social\_Media\_Freq_i$) -------------------- Social_Media_Use
#trust in information from newspapers ($trust\_newspapers_i$) -- trust_news
#trust in information from social media ($trust\_socmed_i$) ---- trust_news_sm
#news consumption ($trad\_news\_network_i$, -------------------- cons_news_n
#$trad\_news\_cable_i$, ---------------------------------------- cons_cable
#$trad\_news\_print_i$, ---------------------------------------- cons_print 
#$trad\_news\_public_i$ ---------------------------------------- cons_public 
#$trad\_news\_talk_i$ ------------------------------------------ cons_talk
#$trad\_news\_desk_i$ ------------------------------------------ cons_desk
#$trad\_news\_mobile_i$) --------------------------------------- cons_mobile
#browser used, ------------------------------------------------- Safari_dummy
#pre-treatment version of the DV ------------------------------- First_Wave
#logged number of visits to domains with NewsGuard scores ------ log_news




dataframe_1$SMP4201 <- as.character(dataframe_1$SMP4201)
unique(dataframe_1$SMP4201)


dataframe_1$SMP4201 <- factor(dataframe_1$SMP4201, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_news_n <- as.numeric(dataframe_1$SMP4201)


dataframe_1$SMP4202 <- as.character(dataframe_1$SMP4202)
dataframe_1$SMP4202 <- factor(dataframe_1$SMP4202, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_cable <- as.numeric(dataframe_1$SMP4202)

dataframe_1$SMP4203 <- as.character(dataframe_1$SMP4203)
dataframe_1$SMP4203 <- factor(dataframe_1$SMP4203, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_print <- as.numeric(dataframe_1$SMP4203)


dataframe_1$SMP4204 <- as.character(dataframe_1$SMP4204)
dataframe_1$SMP4204 <- factor(dataframe_1$SMP4204, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_public <- as.numeric(dataframe_1$SMP4204)


dataframe_1$SMP4205 <- as.character(dataframe_1$SMP4205)
dataframe_1$SMP4205 <- factor(dataframe_1$SMP4205, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_talk <- as.numeric(dataframe_1$SMP4205)



dataframe_1$SMP4206 <- as.character(dataframe_1$SMP4206)
dataframe_1$SMP4206 <- factor(dataframe_1$SMP4206, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_desk <- as.numeric(dataframe_1$SMP4206)



dataframe_1$SMP4207 <- as.character(dataframe_1$SMP4207)
dataframe_1$SMP4207 <- factor(dataframe_1$SMP4207, levels = c("Never",
                                                              "Less Than Once a Week",
                                                              "At Least Once a Week",
                                                              "Several Times a Week",
                                                              "Every Day"))
dataframe_1$cons_mobile <- as.numeric(dataframe_1$SMP4207)



dataframe_1$SMP66001 <- as.character(dataframe_1$SMP66001)
dataframe_1$SMP66002 <- as.character(dataframe_1$SMP66002)
dataframe_1$SMP66001 <- as.numeric(dataframe_1$SMP66001)
dataframe_1$SMP66002 <- as.numeric(dataframe_1$SMP66002)

dataframe_1 <- dataframe_1 %>% group_by(caseid) %>% mutate(trust_news_sm = mean(c(SMP66001,SMP66002),na.rm=T))

dataframe_1$SMP67001 <- as.character(dataframe_1$SMP67001)

dataframe_1$SMP67001 <- factor(dataframe_1$SMP67001, levels = c("Not at all",
                                                                "Not too much",
                                                                "Some",
                                                                "A lot"))
dataframe_1$trust_news <- as.numeric(dataframe_1$SMP67001)







dataframe_1$SMP8202A <- as.character(dataframe_1$SMP8202A) 
dataframe_1$SMP8202B <- as.character(dataframe_1$SMP8202B) 
dataframe_1$SMP8202C <- as.character(dataframe_1$SMP8202C) 
dataframe_1$SMP8202D <- as.character(dataframe_1$SMP8202D) 

dataframe_1$Party_ID <- dataframe_1$SMP8202A
dataframe_1$Party_ID <- ifelse(dataframe_1$Party_ID == 'Independent',dataframe_1$SMP8202B,dataframe_1$Party_ID)
dataframe_1$Party_ID <- ifelse(dataframe_1$Party_ID == 'A Democrat',dataframe_1$SMP8202C,dataframe_1$Party_ID)
dataframe_1$Party_ID <- ifelse(dataframe_1$Party_ID == 'A Republican',dataframe_1$SMP8202D,dataframe_1$Party_ID)

unique(dataframe_1$Party_ID)

dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Strong Democrat",-3,0)
dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Not very strong Democrat",-2,dataframe_1$party_score)
dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Closer to the Democratic Party",-1,dataframe_1$party_score)
dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Strong Republican",3,dataframe_1$party_score)
dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Not very strong Republican",2,dataframe_1$party_score)
dataframe_1$party_score <- ifelse(dataframe_1$Party_ID == "Closer to the Republican Party",1,dataframe_1$party_score)

dataframe_1 <- dataframe_1 %>% mutate(race_white = ifelse(race == 'White',1,0))

dataframe_1$educ <- factor(dataframe_1$educ, levels = c('No HS',
                                                        'High school graduate',
                                                        'Some college',
                                                        '2-year',
                                                        '4-year',
                                                        'Post-grad'))
dataframe_1$educ_score <- as.numeric(dataframe_1$educ)
dataframe_1$educ_score <- as.numeric(dataframe_1$educ)


dataframe_1$gender <- as.character(dataframe_1$gender)
dataframe_1 <- dataframe_1 %>% mutate(gender_dummy_fem = ifelse(gender == 'Female',1,0))


dataframe_1$ideo5 <- factor(dataframe_1$ideo5, levels = c('Very Liberal',
                                                          'Liberal',
                                                          'Moderate',
                                                          'Conservative',
                                                          'Very Conservative'))


dataframe_1$ideo_score <- as.numeric(dataframe_1$ideo5)






##Create variable for age:
dataframe_1 <- dataframe_1 %>% mutate(Age = 2020 - birthyr)
dataframe_1 <- dataframe_1 %>% mutate(Age_Sq = Age^2)
dataframe_1 <- dataframe_1 %>% mutate(DL_inverse = Total_DL - (max(Total_DL,na.rm=T)+1))


#Create Media Trust measure (Wave 1: Trust_Media_w1 ; Wave 2: Trust_Media_w2):
dataframe_1$SMP  <- factor(dataframe_1$SMP, levels = c('Keeps political leaders from doing their job',
                                                       'Stops political leaders from doing things that shouldn’t be done'))


dataframe_1$SMP69002  <- factor(dataframe_1$SMP69002, levels = c('Tend to favor one side',
                                                                 'Deal fairly with all sides'))

dataframe_1$SMP69003  <- factor(dataframe_1$SMP69003, levels = c('All the time',
                                                                 'Most of the time',
                                                                 'About half the time',
                                                                 'Once in a while',
                                                                 'Never'))


dataframe_1$SMP_w2  <- factor(dataframe_1$SMP_w2, levels = c('Keeps political leaders from doing their job',
                                                             'Stops political leaders from doing things that shouldn’t be done'))


dataframe_1$SMP69002_w2  <- factor(dataframe_1$SMP69002_w2, levels = c('Tend to favor one side',
                                                                       'Deal fairly with all sides'))

dataframe_1$SMP69003_w2  <- factor(dataframe_1$SMP69003_w2, levels = c('All the time',
                                                                       'Most of the time',
                                                                       'About half the time',
                                                                       'Once in a while',
                                                                       'Never'))


dataframe_1$SMP <- as.numeric(dataframe_1$SMP)
dataframe_1$SMP <- dataframe_1$SMP - 1
dataframe_1$SMP69002 <- as.numeric(dataframe_1$SMP69002)
dataframe_1$SMP69002 <- dataframe_1$SMP69002 - 1
dataframe_1$SMP69003 <- as.numeric(dataframe_1$SMP69003)
dataframe_1$SMP69003 <- dataframe_1$SMP69003 - 1
dataframe_1$SMP69003 <- dataframe_1$SMP69003/4


dataframe_1$SMP_w2 <- as.numeric(dataframe_1$SMP_w2)
dataframe_1$SMP_w2 <- dataframe_1$SMP_w2 - 1
dataframe_1$SMP69002_w2 <- as.numeric(dataframe_1$SMP69002_w2)
dataframe_1$SMP69002_w2 <- dataframe_1$SMP69002_w2 - 1
dataframe_1$SMP69003_w2 <- as.numeric(dataframe_1$SMP69003_w2)
dataframe_1$SMP69003_w2 <- dataframe_1$SMP69003_w2 - 1
dataframe_1$SMP69003_w2 <- dataframe_1$SMP69003_w2/4

dataframe_1$Trust_Media_w1 <- as.numeric(dataframe_1$SMP) + as.numeric(dataframe_1$SMP69002) + as.numeric(dataframe_1$SMP69003)

dataframe_1$Trust_Media_w2 <- as.numeric(dataframe_1$SMP_w2) + as.numeric(dataframe_1$SMP69002_w2) + as.numeric(dataframe_1$SMP69003_w2)


mean(dataframe_1$Trust_Media_w1)
mean(dataframe_1$Trust_Media_w2)



#Pull in compliance check data (compliance_check_1,compliance_check_2,Complied):
Compliance_Check <- read.csv('Compliance_Check_Data.csv')

First_Check <- Compliance_Check %>% filter(timestamp < 1593000000000)
First_Check <- First_Check %>% group_by(user_id) %>% top_n(1, timestamp)
colnames(First_Check) <- c('user_id','compliance_check_1','timestamp_1')

Second_Check <- Compliance_Check %>% filter(timestamp > 1593000000000)
Second_Check <- Second_Check %>% group_by(user_id) %>% top_n(1, timestamp)
colnames(Second_Check) <- c('user_id','compliance_check_2','timestamp_2')


df_1 <- merge(dataframe_1,First_Check,by.x='visa1',by.y='user_id',all.x=T)

df_new <- df_1 %>% select(visa1,Treated,compliance_check_1,timestamp_1)

df_new_1 <- merge(df_new,Second_Check,by.x='visa1',by.y='user_id',all.x=T)


df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 1 & compliance_check_1 == 1 & compliance_check_2 == 1,'Treated and Complied','Treated, but only complied in the second wave'))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 1 & compliance_check_1 == 1 & compliance_check_2 == 0,'Treated, but removed NewsGuard between the first and second wave',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 1 & compliance_check_1 == 0 & compliance_check_2 == 0,'Treated, but never complied',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 0 & compliance_check_1 == 0 & compliance_check_2 == 0,'Not Treated',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 0 & compliance_check_1 == 1,'Not Treated, but had NewsGuard',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 0 & compliance_check_2 == 1,'Not Treated, but had NewsGuard',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 0 & is.na(compliance_check_2),'Not Treated, but missing some compliance check data',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 1 & is.na(compliance_check_2),'Treated, but missing some compliance check data',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 0 & is.na(compliance_check_1),'Not Treated, but missing some compliance check data',Groups))
df_new_1 <- df_new_1 %>% mutate(Groups = ifelse(Treated == 1 & is.na(compliance_check_1),'Treated, but missing some compliance check data',Groups))

table(df_new_1$Groups)

df_new_1 <- df_new_1 %>% mutate(Complied = ifelse(compliance_check_1 == 1 & compliance_check_2 == 1,1,0))

df_new_2 <- df_new_1 %>% select(visa1,compliance_check_1,compliance_check_2,Complied,Groups)

dataframe_1 <- merge(dataframe_1,df_new_2,by='visa1',all.x=T)






library(dplyr)














dataframe_1$SMP8201 <- factor(dataframe_1$SMP8201, levels = c('Very liberal',
                                                              'Somewhat liberal',
                                                              'Slightly liberal',
                                                              'Moderate; middle of the road',
                                                              'Slightly conservative',
                                                              'Somewhat conservative',
                                                              'Very conservative'))


dataframe_1$ideo_score <- as.numeric(dataframe_1$SMP8201)



##################################### Testing Hypotheses ####################################



#gender_dummy_fem
#educ_score
#Age
#Age_Sq
#party_score
#race_white
#ideo_score
#Trust_Media_w1
#Social_Media_Use
#trust_news
#trust_news_sm
#cons_news_n
#cons_cable
#cons_print 
#cons_public 
#cons_talk
#cons_desk
#cons_mobile
#Safari_dummy
#First_Wave
#log_news

############## Format Data - COVID-19 Misinformation:

dataframe_1$SMP5061_w2 <- factor(dataframe_1$SMP5061_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5062_w2 <- factor(dataframe_1$SMP5062_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5063_w2 <- factor(dataframe_1$SMP5063_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))


dataframe_1$SMP5064_w2 <- factor(dataframe_1$SMP5064_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5065_w2 <- factor(dataframe_1$SMP5065_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))



dataframe_1$SMP5061_w2 <- as.numeric(dataframe_1$SMP5061_w2)
dataframe_1$SMP5062_w2 <- as.numeric(dataframe_1$SMP5062_w2)
dataframe_1$SMP5063_w2 <- as.numeric(dataframe_1$SMP5063_w2)
dataframe_1$SMP5064_w2 <- as.numeric(dataframe_1$SMP5064_w2)
dataframe_1$SMP5065_w2 <- as.numeric(dataframe_1$SMP5065_w2)


dataframe_1$Covid_Misinfo_Index <- dataframe_1$SMP5061_w2 + dataframe_1$SMP5062_w2 + dataframe_1$SMP5063_w2 + dataframe_1$SMP5064_w2 + dataframe_1$SMP5065_w2   


############## Format Data - BLM Misinformation:


dataframe_1$SMP5081_w2 <- factor(dataframe_1$SMP5081_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5082_w2 <- factor(dataframe_1$SMP5082_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5083_w2 <- factor(dataframe_1$SMP5083_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))


dataframe_1$SMP5084_w2 <- factor(dataframe_1$SMP5084_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))

dataframe_1$SMP5085_w2 <- factor(dataframe_1$SMP5085_w2, levels = c("Not at all accurate",
                                                                    "Not very accurate",
                                                                    "Somewhat accurate",
                                                                    "Very accurate"))


dataframe_1$SMP5081_w2 <- as.numeric(dataframe_1$SMP5081_w2)
dataframe_1$SMP5082_w2 <- as.numeric(dataframe_1$SMP5082_w2)
dataframe_1$SMP5083_w2 <- as.numeric(dataframe_1$SMP5083_w2)
dataframe_1$SMP5084_w2 <- as.numeric(dataframe_1$SMP5084_w2)
dataframe_1$SMP5085_w2 <- as.numeric(dataframe_1$SMP5085_w2)

dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(BLM_Misinfo_Index_w2 = mean(c(SMP5081_w2,SMP5082_w2,SMP5084_w2),na.rm=T))
dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(Covid_Misinfo_Index_w2 = mean(c(SMP5061_w2,SMP5062_w2,SMP5064_w2),na.rm=T))


dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(BLM_info_Index_w2 = mean(c(SMP5083_w2,SMP5085_w2),na.rm=T))
dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(Covid_info_Index_w2 = mean(c(SMP5063_w2,SMP5065_w2),na.rm=T))


df_1 <- data_frame_1 %>% ungroup() %>% select(Trust_Media_w2,
                                             Trust_Media_w1,
                                             gender_dummy_fem,
                                             educ_score,
                                             Age,
                                             Age_Sq,
                                             party_score,
                                             race_white,
                                             ideo_score,
                                             trust_news,
                                             trust_news_sm,
                                             cons_news_n,
                                             cons_cable,
                                             cons_print,
                                             cons_public, 
                                             cons_talk,
                                             cons_desk,
                                             cons_mobile,
                                             Safari_dummy,
                                             visa1)


df_2 <- dataframe_1 %>% ungroup() %>% select(Trust_Media_w2,
                                        Trust_Media_w1,
                                        gender_dummy_fem,
                                        educ_score,
                                        Age,
                                        Age_Sq,
                                        party_score,
                                        race_white,
                                        ideo_score,
                                        trust_news,
                                        trust_news_sm,
                                        cons_news_n,
                                        cons_cable,
                                        cons_print,
                                        cons_public, 
                                        cons_talk,
                                        cons_desk,
                                        cons_mobile,
                                        Safari_dummy,
                                        visa1)


df_1$visa1 <- as.character(df_1$visa1)
df_2$visa1 <- as.character(df_2$visa1)


df_1 <- df_1[order(df_1$visa1),]


setdiff(df_1, df_2)

identical(df_1,df_2)

library(arsenal)

summary(comparedf(df_1, df_2))

which(df_1 != df_2, arr.ind=TRUE)

################################# Hypothesis: Trust in Media ################################

#log_news

#

data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Trust_Media_w2,
                                            Trust_Media_w1,
                                            gender_dummy_fem,
                                            educ_score,
                                            Age,
                                            Age_Sq,
                                            party_score,
                                            race_white,
                                            ideo_score,
                                            trust_news,
                                            trust_news_sm,
                                            cons_news_n,
                                            cons_cable,
                                            cons_print,
                                            cons_public, 
                                            cons_talk,
                                            cons_desk,
                                            cons_mobile,
                                            Safari_dummy)



data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_media_trust <- lm_robust(Trust_Media_w2 ~ ., data = data_for_analysis)
summary(lm_adj_media_trust)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_media_trust_compl_1 <- iv_robust(Trust_Media_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_media_trust_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_media_trust_compl_2 <- iv_robust(Trust_Media_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_media_trust_compl_2)


data_for_analysis

data_for_analysis_2

data_for_analysis <- data_for_analysis[order(data_for_analysis$Age,data_for_analysis$Trust_Media_w1,data_for_analysis$Trust_Media_w2,data_for_analysis$trust_news_sm,data_for_analysis$trust_news,data_for_analysis$cons_desk,data_for_analysis$cons_mobile,data_for_analysis$educ_score),]
data_for_analysis_2 <- data_for_analysis_2[order(data_for_analysis_2$Age,data_for_analysis_2$Trust_Media_w1,data_for_analysis_2$Trust_Media_w2,data_for_analysis_2$trust_news_sm,data_for_analysis_2$trust_news,data_for_analysis_2$cons_desk,data_for_analysis_2$cons_mobile,data_for_analysis_2$cons_mobile,data_for_analysis_2$educ_score),]


identical(data_for_analysis,data_for_analysis_2)

which(data_for_analysis != data_for_analysis_2, arr.ind=TRUE)

nrow(data_for_analysis_2)
nrow(data_for_analysis)

str(data_for_analysis_2)
str(data_for_analysis)

summary(data_for_analysis_2)

summary(data_for_analysis)



data_for_analysis <- na.omit(data_for_analysis_2)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_media_trust <- lm_robust(Trust_Media_w2 ~ ., data = data_for_analysis)
summary(lm_adj_media_trust)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_media_trust_compl_1 <- iv_robust(Trust_Media_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_media_trust_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_media_trust_compl_2 <- iv_robust(Trust_Media_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_media_trust_compl_2)



################################# Hypothesis: Affective Polarization ################################

data_for_analysis <- dataframe_1 %>% ungroup() %>% select(aff_pol_w2,
                                            Treated,
                                            aff_pol_w1,
                                            gender_dummy_fem,
                                            educ_score,
                                            Age,
                                            Age_Sq,
                                            party_score,
                                            race_white,
                                            ideo_score,
                                            Trust_Media_w1,
                                            trust_news,
                                            trust_news_sm,
                                            cons_news_n,
                                            cons_cable,
                                            cons_print,
                                            cons_public, 
                                            cons_talk,
                                            cons_desk,
                                            cons_mobile,
                                            Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}



names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_aff_pol <- lm_robust(aff_pol_w2 ~ ., data = data_for_analysis)
summary(lm_adj_aff_pol)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_aff_pol_compl_1 <- iv_robust(aff_pol_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_aff_pol_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_aff_pol_compl_2 <- iv_robust(aff_pol_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_aff_pol_compl_2)


################################# Hypothesis: Political Cynicism  ################################

data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Pol_cyn_2,
                                            Treated,
                                            Pol_cyn_1,
                                            gender_dummy_fem,
                                            educ_score,
                                            Age,
                                            Age_Sq,
                                            party_score,
                                            race_white,
                                            ideo_score,
                                            Trust_Media_w1,
                                            trust_news,
                                            trust_news_sm,
                                            cons_news_n,
                                            cons_cable,
                                            cons_print,
                                            cons_public, 
                                            cons_talk,
                                            cons_desk,
                                            cons_mobile,
                                            Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}



names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Pol_cyn <- lm_robust(Pol_cyn_2 ~ ., data = data_for_analysis)
summary(lm_adj_Pol_cyn)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_Pol_cyn_compl_1 <- iv_robust(Pol_cyn_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_Pol_cyn_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_Pol_cyn_compl_2 <- iv_robust(Pol_cyn_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Pol_cyn_compl_2)















#Media Trust

texreg(list(lm_adj_media_trust,ivreg_media_trust_compl_1,ivreg_media_trust_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in Media",
       label = "table:adj_hyp_1_1",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","Trust of news on social media","Trust of news in newspapers","Party ID",
                             "Race/Ethnicity","Education","Gender","Ideology","Age-Squared","Trust in Media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))



#Affective Polarization


texreg(list(lm_adj_aff_pol,ivreg_aff_pol_compl_1,ivreg_aff_pol_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption = "Testing Effect of Intervention on Affective Polarization",
       label = "table:CACE_1_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Affective Polarization (wave 1)","Web Browser (Safari)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (news on desktop)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Age","Age-Squared"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))


#Political Cynicism

texreg(list(lm_adj_Pol_cyn,ivreg_Pol_cyn_compl_1,ivreg_Pol_cyn_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Political Cynicism",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Political cynicism (wave 1)","Web Browser (Safari)","News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)","News consumption (public radio)",
                             "News consumption (talk radio)","Trust of news on social media","Trust of news in newspapers",
                             "Party ID","Education","Gender","Age","Age-Squared","Trust in media"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))







################################# Hypothesis: Trust in Institutions  ################################
 dataframe_1$SMP6701 <- as.character(dataframe_1$SMP6701)
 dataframe_1$SMP6701 <- as.numeric(dataframe_1$SMP6701)
 dataframe_1$SMP6702 <- as.character(dataframe_1$SMP6702)
 dataframe_1$SMP6702 <- as.numeric(dataframe_1$SMP6702)
 dataframe_1$SMP6703 <- as.character(dataframe_1$SMP6703)
 dataframe_1$SMP6703 <- as.numeric(dataframe_1$SMP6703)
 dataframe_1$SMP6704 <- as.character(dataframe_1$SMP6704)
 dataframe_1$SMP6704 <- as.numeric(dataframe_1$SMP6704)
 
 dataframe_1$SMP6701_w2 <- as.character(dataframe_1$SMP6701_w2)
 dataframe_1$SMP6701_w2 <- as.numeric(dataframe_1$SMP6701_w2)
 dataframe_1$SMP6702_w2 <- as.character(dataframe_1$SMP6702_w2)
 dataframe_1$SMP6702_w2 <- as.numeric(dataframe_1$SMP6702_w2)
 dataframe_1$SMP6703_w2 <- as.character(dataframe_1$SMP6703_w2)
 dataframe_1$SMP6703_w2 <- as.numeric(dataframe_1$SMP6703_w2)
 dataframe_1$SMP6704_w2 <- as.character(dataframe_1$SMP6704_w2)
 dataframe_1$SMP6704_w2 <- as.numeric(dataframe_1$SMP6704_w2)
 
 dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(Trust_inst_w1 = mean(c(SMP6701,SMP6702,SMP6703,SMP6704)))
 dataframe_1 <- dataframe_1 %>% group_by(visa1)  %>% mutate(Trust_inst_w2 = mean(c(SMP6701_w2,SMP6702_w2,SMP6703_w2,SMP6704_w2)))
 
 
 
data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Trust_inst_w2,
                                            Trust_inst_w1,
                                            gender_dummy_fem,
                                            educ_score,
                                            Age,
                                            Age_Sq,
                                            party_score,
                                            race_white,
                                            ideo_score,
                                            Trust_Media_w1,
                                            trust_news,
                                            trust_news_sm,
                                            cons_news_n,
                                            cons_cable,
                                            cons_print,
                                            cons_public, 
                                            cons_talk,
                                            cons_desk,
                                            cons_mobile,
                                            Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Trust_inst <- lm_robust(Trust_inst_w2 ~ ., data = data_for_analysis)
summary(lm_adj_Trust_inst)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_Trust_inst_compl_1 <- iv_robust(Trust_inst_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_Trust_inst_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_Trust_inst_compl_2 <- iv_robust(Trust_inst_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Trust_inst_compl_2)




#Institutional Trust

texreg(list(lm_adj_Trust_inst,ivreg_Trust_inst_compl_1,ivreg_Trust_inst_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in Institutions",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)",
                             "News consumption (public radio)","Trust of news on social media","Trust of news in newspapers",
                             "Race/Ethnicity","Ideology","Age","Age-Squared","Institutional Trust (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))



  
################################# Hypothesis: Fake News is a Problem  ################################


dataframe_1$SMP4326 <- factor(dataframe_1$SMP4326, levels = c("Not a problem at all",
                                                              "A small problem",
                                                              "A moderately big problem",
                                                              "A very big problem"))

dataframe_1$SMP4326 <- as.numeric(dataframe_1$SMP4326)


dataframe_1$SMP4326_w2 <- factor(dataframe_1$SMP4326_w2, levels = c("Not a problem at all",
                                                                    "A small problem",
                                                                    "A moderately big problem",
                                                                    "A very big problem"))


dataframe_1$SMP4326_w2 <- as.numeric(dataframe_1$SMP4326_w2)



data_for_analysis <- dataframe_1 %>% ungroup() %>% select(SMP4326_w2,
                                                          SMP4326,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_FN_prob <- lm_robust(SMP4326_w2 ~ ., data = data_for_analysis)
summary(lm_adj_FN_prob)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_FN_prob_compl_1 <- iv_robust(SMP4326_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_FN_prob_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_FN_prob_compl_2 <- iv_robust(SMP4326_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_FN_prob_compl_2)




#Fake News is a Problem

texreg(list(lm_adj_FN_prob,ivreg_FN_prob_compl_1,ivreg_FN_prob_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Whether They believe ``Fake News is a Problem''",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Fake News is a Problem (wave 1)","News consumption (network news)",
                             "News consumption (cable news)","News consumption (talk radio)",
                             "News consumption (desktop)","News consumption (mobile)","Trust of news on social media","Trust of news in newspapers",
                             "Party ID","Race/Ethnicity","Education","Gender","Ideology","Age-Squared","Trust in media"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))




  
  
  
  ################################# Hypothesis: Is Fake News a Problem in the Mainstream Media?  ################################

dataframe_1$SMP4310 <- factor(dataframe_1$SMP4310, levels = c("5 - Mistakes by the mainstream media are rare, and I generally find what they report to be credible",
                                                              "4",
                                                              "3",
                                                              "2",
                                                              "1 - \"Fake news\" is a serious problem affecting the mainstream media"))
dataframe_1$SMP4310 <- as.numeric(dataframe_1$SMP4310)

dataframe_1$SMP4310<- dataframe_1$SMP4310-1
mean(dataframe_1$SMP4310,na.rm=T)


sd_4310 <- sd(dataframe_1$SMP4310,na.rm=T)



dataframe_1$SMP4310_w2 <- factor(dataframe_1$SMP4310_w2, levels = c("5 - Mistakes by the mainstream media are rare, and I generally find what they report to be credible",
                                                                    "4",
                                                                    "3",
                                                                    "2",
                                                                    "1 - \"Fake news\" is a serious problem affecting the mainstream media"))
dataframe_1$SMP4310_w2 <- as.numeric(dataframe_1$SMP4310_w2)




data_for_analysis <- dataframe_1 %>% ungroup() %>% select(SMP4310_w2,
                                                          SMP4310,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_FN_prob_main <- lm_robust(SMP4310_w2 ~ ., data = data_for_analysis)
summary(lm_adj_FN_prob_main)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_FN_prob_main_compl_1 <- iv_robust(SMP4310_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_FN_prob_main_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_FN_prob_main_compl_2 <- iv_robust(SMP4310_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_FN_prob_main_compl_2)



#Institutional Trust

texreg(list(lm_adj_FN_prob_main,ivreg_FN_prob_main_compl_1,ivreg_FN_prob_main_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Whether They believe ``Fake News is a Problem in the Mainstream Media''",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Fake News is a Problem in the MSM (wave 1)", "News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)",
                             "News consumption (public radio)","News consumption (talk radio)","News consumption (mobile)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID",
                             "Race/Ethnicity","Education","Ideology","Age","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))






# ABC News

################################# Hypothesis: Is Fake News a Problem in the Mainstream Media?  ################################


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(ABC_Trust_2,
                                                          ABC_Trust_1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_ABC <- lm_robust(ABC_Trust_2 ~ ., data = data_for_analysis)
summary(lm_adj_ABC)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_ABC_compl_1 <- iv_robust(ABC_Trust_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_ABC_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_ABC_compl_2 <- iv_robust(ABC_Trust_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_ABC_compl_2)




#ABC

texreg(list(lm_adj_ABC,ivreg_ABC_compl_1,ivreg_ABC_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in ABC",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Trust in ABC (wave 1)", "News consumption (network news)",
                             "News consumption (cable news)",
                             "News consumption (public radio)","News consumption (talk radio)","News consumption (desktop)","News consumption (mobile)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID","Education",
                             "Gender","Ideology","Age","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))








# NBC News


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(NBC_Trust_2,
                                                          NBC_Trust_1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_NBC <- lm_robust(NBC_Trust_2 ~ ., data = data_for_analysis)
summary(lm_adj_NBC)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_NBC_compl_1 <- iv_robust(NBC_Trust_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_NBC_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_NBC_compl_2 <- iv_robust(NBC_Trust_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_NBC_compl_2)




#NBC

texreg(list(lm_adj_NBC,ivreg_NBC_compl_1,ivreg_NBC_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in NBC",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Web Browser (Safari)","Trust in NBC (wave 1)", "News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)",
                             "News consumption (public radio)","News consumption (talk radio)","News consumption (desktop)","News consumption (mobile)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender",
                             "Ideology","Age","Age-Squared","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))





CNN_Trust_1
CNN_Trust_2
# CNN News


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(CNN_Trust_2,
                                                          CNN_Trust_1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_CNN <- lm_robust(CNN_Trust_2 ~ ., data = data_for_analysis)
summary(lm_adj_CNN)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_CNN_compl_1 <- iv_robust(CNN_Trust_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_CNN_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_CNN_compl_2 <- iv_robust(CNN_Trust_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_CNN_compl_2)




#CNN

texreg(list(lm_adj_CNN,ivreg_CNN_compl_1,ivreg_CNN_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in CNN",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Web Browser (Safari)","Trust in CNN (wave 1)", "News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)",
                             "News consumption (public radio)","News consumption (talk radio)","News consumption (desktop)","News consumption (mobile)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender",
                             "Ideology","Age","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))








CBS_Trust_1
CBS_Trust_2
# CBS News


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(CBS_Trust_2,
                                                          CBS_Trust_1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_CBS <- lm_robust(CBS_Trust_2 ~ ., data = data_for_analysis)
summary(lm_adj_CBS)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_CBS_compl_1 <- iv_robust(CBS_Trust_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_CBS_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_CBS_compl_2 <- iv_robust(CBS_Trust_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_CBS_compl_2)




#CBS

texreg(list(lm_adj_CBS,ivreg_CBS_compl_1,ivreg_CBS_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in CBS",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Trust in CBS (wave 1)", "News consumption (network news)",
                             "News consumption (public radio)","News consumption (talk radio)","News consumption (desktop)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender",
                             "Ideology","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))










Fox_Trust_1
Fox_Trust_2
# Fox News



data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Fox_Trust_2,
                                                          Fox_Trust_1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

lm_adj_Fox <- lm_robust(Fox_Trust_2 ~ ., data = data_for_analysis)
summary(lm_adj_Fox)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

#CACE Model 1
ivreg_Fox_compl_1 <- iv_robust(Fox_Trust_2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)
summary(ivreg_Fox_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- data_for_analysis %>%
  select(Treated, everything())

ivreg_Fox_compl_2 <- iv_robust(Fox_Trust_2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Fox_compl_2)




#Fox

texreg(list(lm_adj_Fox,ivreg_Fox_compl_1,ivreg_Fox_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention on Trust in Fox News",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Web Browser (Safari)","Trust in Fox News (wave 1)", "News consumption (network news)",
                             "News consumption (cable news)","News consumption (print news)",
                             "News consumption (talk radio)","News consumption (desktop)","News consumption (mobile)",
                             "Trust of news on social media","Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender",
                             "Ideology","Age-Squared","Trust in media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))
















################################### Pulse Data   ##################################

###### Pull in pre-treatment Pulse Data:




setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')

Pulse_Pre <- read.csv('pulse_vars_pre.csv')

###### Pull in post-treatment Pulse Data:
Pulse_Post <- read.csv('pulse_vars_post.csv')


Pulse_data <- merge(dataframe_1,Pulse_Pre,by='caseid')

Pulse_data <- merge(Pulse_data,Pulse_Post,by='caseid')

####### Pull in DV Data ##############

Pulse_DV <- read.csv('pulse_vars_DV.csv')


Pulse_data <- merge(Pulse_data,Pulse_DV,by='caseid')

Pulse_data <- Pulse_data %>% mutate(Prop_Unreliable_NewsG_Score_dv = ifelse(is.na(Average_domain_NewsG_Score_dv),NA,Prop_Unreliable_NewsG_Score_dv))
Pulse_data <- Pulse_data %>% mutate(Prop_Reliable_NewsG_Score_dv = ifelse(is.na(Average_domain_NewsG_Score_dv),NA,Prop_Reliable_NewsG_Score_dv))
Pulse_data <- Pulse_data %>% mutate(Prop_Unreliable_NewsG_Score_post = ifelse(is.na(Average_domain_NewsG_Score_post),NA,Prop_Unreliable_NewsG_Score_post))
Pulse_data <- Pulse_data %>% mutate(Prop_Reliable_NewsG_Score_post = ifelse(is.na(Average_domain_NewsG_Score_post),NA,Prop_Reliable_NewsG_Score_post))
Pulse_data <- Pulse_data %>% mutate(Prop_Unreliable_NewsG_Score = ifelse(is.na(Average_domain_NewsG_Score),NA,Prop_Unreliable_NewsG_Score))
Pulse_data <- Pulse_data %>% mutate(Prop_Reliable_NewsG_Score = ifelse(is.na(Average_domain_NewsG_Score),NA,Prop_Reliable_NewsG_Score))





################## Proportion Unreliable ##############################################



data_for_analysis <- Pulse_data %>% ungroup() %>% select(Prop_Unreliable_NewsG_Score_post,
                                           Prop_Unreliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

lm_adj_Unrel_Post <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ ., data = data_for_analysis)
summary(lm_adj_Unrel_Post)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

#CACE Model 1
ivreg_Unrel_Post_compl_1 <- iv_robust(Prop_Unreliable_NewsG_Score_post ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Unrel_Post_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


ivreg_Unrel_Post_compl_2 <- iv_robust(Prop_Unreliable_NewsG_Score_post ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Unrel_Post_compl_2)


texreg(list(lm_adj_Unrel_Post,ivreg_Unrel_Post_compl_1,ivreg_Unrel_Post_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Proportion of Unreliable News Viewed (Post-Treatment)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","News consumption (desktop)","Trust of news in newspapers","Race/Ethnicity",
                             "Education","Age-Squared","Proportion (unreliable news)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))


#Moderator - Unreliable Proportion


#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_DL_Unrel <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*DL_inverse + . - Total_DL, data = data_for_analysis)
summary(lm_adj_DL_Unrel)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_S_Misinfo_Unrel <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Total_Science_Misinfo + . - Total_DL, data = data_for_analysis)
summary(lm_adj_S_Misinfo_Unrel)


#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Age_Unrel<- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Age + . - Total_DL, data = data_for_analysis)
summary(lm_adj_Age_Unrel)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_SM_use_Unrel<- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Social_Media_Use + ., data = data_for_analysis)
summary(lm_adj_SM_use_Unrel)



#Moderator:  mean_cons

Pulse_data <- Pulse_data %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_consump_Unrel<- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*mean_cons + . - cons_desk - cons_mobile, data = data_for_analysis)
summary(lm_adj_consump_Unrel)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Part_Unrel <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*abs_part + ., data = data_for_analysis)
summary(lm_adj_Part_Unrel)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Prop_Score <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Prop_Unreliable_NewsG_Score + ., data = data_for_analysis)
summary(lm_adj_Prop_Score)



################## Domain Score ##############################################



data_for_analysis <- Pulse_data %>%  ungroup() %>% select(Average_domain_NewsG_Score_post,
                                           Average_domain_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_news_Post <- lm_robust(Average_domain_NewsG_Score_post ~ ., data = data_for_analysis)
summary(lm_news_Post)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



#CACE Model 1
ivreg_news_Post_compl_1 <- iv_robust(Average_domain_NewsG_Score_post ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_news_Post_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_news_Post_compl_2 <- iv_robust(Average_domain_NewsG_Score_post ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_news_Post_compl_2)




texreg(list(lm_news_Post,ivreg_news_Post_compl_1,ivreg_news_Post_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Reliability Score of News Viewed (Post-Treatment)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","News consumption (public radio)",
                             "News consumption (desktop)","Trust of news on social media","Trust of news in newspapers",
                             "Education","Ideology","Age","Avg. Reliability Score (pre-treatment)","Log of news viewed"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))






#Moderator - Domain Score


#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_DL_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*DL_inverse + . - Total_DL, data = data_for_analysis)
summary(lm_adj_DL_Score)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_S_Misinfo_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Total_Science_Misinfo + . - Total_DL, data = data_for_analysis)
summary(lm_adj_S_Misinfo_Score)


#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Age_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Age + . - Total_DL, data = data_for_analysis)
summary(lm_adj_Age_Score)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_SM_use_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Social_Media_Use + ., data = data_for_analysis)
summary(lm_adj_SM_use_Score)



#Moderator:  mean_cons

Pulse_data <- Pulse_data %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_consump_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*mean_cons + . - cons_desk - cons_mobile, data = data_for_analysis)
summary(lm_adj_consump_Score)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Part_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*abs_part + ., data = data_for_analysis)
summary(lm_adj_Part_Score)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Prop_Score <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Prop_Unreliable_NewsG_Score + ., data = data_for_analysis)
summary(lm_adj_Prop_Score)








################## Proportion Reliable ##############################################



data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Prop_Reliable_NewsG_Score_post,
                                           Prop_Reliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

lm_adj_Rel_Post <- lm_robust(Prop_Reliable_NewsG_Score_post ~ ., data = data_for_analysis)
summary(lm_adj_Rel_Post)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

#CACE Model 1
ivreg_Rel_Post_compl_1 <- iv_robust(Prop_Reliable_NewsG_Score_post ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Rel_Post_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


ivreg_Rel_Post_compl_2 <- iv_robust(Prop_Reliable_NewsG_Score_post ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Rel_Post_compl_2)






texreg(list(lm_adj_Rel_Post,ivreg_Rel_Post_compl_1,ivreg_Rel_Post_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Proportion of Reliable News Viewed (Post-Treatment)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Ideology","Reliable News (pre-treatment)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))




################## Count of Unreliable ##############################################


data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Count_Unreliable_NewsG_Score_post,
                                           Count_Unreliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_adj_Unrel_c_Post <- lm_robust(Count_Unreliable_NewsG_Score_post ~ ., data = data_for_analysis)
summary(lm_adj_Unrel_c_Post)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


#CACE Model 1
ivreg_Unrel_c_Post_compl_1 <- iv_robust(Count_Unreliable_NewsG_Score_post ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Unrel_c_Post_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_Unrel_c_Post_compl_2 <- iv_robust(Count_Unreliable_NewsG_Score_post ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Unrel_c_Post_compl_2)






texreg(list(lm_adj_Unrel_c_Post,ivreg_Unrel_c_Post_compl_1,ivreg_Unrel_c_Post_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Count of Unreliable News Viewed (Post-Treatment)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Browser (Safari)","News consumption (news networks)","News consumption (cable news)",
                             "News consumption (public radio)","News consumption (desktop)","News consumption (mobile)","Trust of news on Social Media",
                             "Trust of news in newspapers","Party ID","Education","Gender","Ideology","Age-Squared","Count of Unreliable News Viewed (pre-treatment)","Log of News Viewed"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))





################## Count of Reliable ##############################################


data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Count_Reliable_NewsG_Score_post,
                                           Count_Reliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_adj_rel_c_Post <- lm_robust(Count_Reliable_NewsG_Score_post ~ ., data = data_for_analysis)
summary(lm_adj_rel_c_Post)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


#CACE Model 1
ivreg_rel_c_Post_compl_1 <- iv_robust(Count_Reliable_NewsG_Score_post ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_rel_c_Post_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_rel_c_Post_compl_2 <- iv_robust(Count_Reliable_NewsG_Score_post ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_rel_c_Post_compl_2)






texreg(list(lm_adj_rel_c_Post,ivreg_rel_c_Post_compl_1,ivreg_rel_c_Post_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Count of Reliable News Viewed (Post-Treatment)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Browser (Safari)","News consumption (public radio)","News consumption (on mobile)","Party ID",
                             "Education","Age","Count of reliable news (pre-treatment)","Log of news viewed (pre-treatment)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))



################## Proportion Unreliable ##############################################


#

data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Prop_Unreliable_NewsG_Score_dv,
                                           Prop_Unreliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

lm_adj_Unrel_dv <- lm_robust(Prop_Unreliable_NewsG_Score_dv ~ ., data = data_for_analysis)
summary(lm_adj_Unrel_dv)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

#CACE Model 1
ivreg_Unrel_dv_compl_1 <- iv_robust(Prop_Unreliable_NewsG_Score_dv ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Unrel_dv_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


ivreg_Unrel_dv_compl_2 <- iv_robust(Prop_Unreliable_NewsG_Score_dv ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Unrel_dv_compl_2)





texreg(list(lm_adj_Unrel_dv,ivreg_Unrel_dv_compl_1,ivreg_Unrel_dv_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Proportion of Unreliable News Viewed (Treatment Period)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","News consumption (public radio)","News consumption (desktop)","Ideology",
                             "Age-Squared","Trust in Media","Proportion (unreliable news)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))





################## Domain Score ##############################################



data_for_analysis <- Pulse_data %>%  ungroup() %>%  select(Average_domain_NewsG_Score_dv,
                                           Average_domain_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_news_dv <- lm_robust(Average_domain_NewsG_Score_dv ~ ., data = data_for_analysis)
summary(lm_news_dv)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



#CACE Model 1
ivreg_news_dv_compl_1 <- iv_robust(Average_domain_NewsG_Score_dv ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_news_dv_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_news_dv_compl_2 <- iv_robust(Average_domain_NewsG_Score_dv ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_news_dv_compl_2)




texreg(list(lm_news_dv,ivreg_news_dv_compl_1,ivreg_news_dv_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Average Reliability Score of News Viewed (Treatment Period)",
       label = "table:CACE_2_hyp_1_3",
       custom.coef.names = c("Treatment","News consumption (public radio)","News consumption (talk radio)","News consumption (desktop)",
                             "News consumption (mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age","Trust in Media","Average Reliability Score (pre-treatment)"),
       include.rmse = FALSE,
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))



################## Proportion Reliable ##############################################



data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Prop_Reliable_NewsG_Score_dv,
                                           Prop_Reliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

lm_adj_Rel_dv <- lm_robust(Prop_Reliable_NewsG_Score_dv ~ ., data = data_for_analysis)
summary(lm_adj_Rel_dv)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

#CACE Model 1
ivreg_Rel_dv_compl_1 <- iv_robust(Prop_Reliable_NewsG_Score_dv ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Rel_dv_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]


ivreg_Rel_dv_compl_2 <- iv_robust(Prop_Reliable_NewsG_Score_dv ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Rel_dv_compl_2)



texreg(list(lm_adj_Rel_dv,ivreg_Rel_dv_compl_1,ivreg_Rel_dv_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Proportion of Reliable News Viewed (Treatment Period)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Consumption (public radio)","Party ID","Age","Reliable News (pre-treatment)","Log of news viewed"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))





################## Count of Unreliable ##############################################


data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Count_Unreliable_NewsG_Score_dv,
                                           Count_Unreliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_adj_Unrel_c_dv <- lm_robust(Count_Unreliable_NewsG_Score_dv ~ ., data = data_for_analysis)
summary(lm_adj_Unrel_c_dv)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


#CACE Model 1
ivreg_Unrel_c_dv_compl_1 <- iv_robust(Count_Unreliable_NewsG_Score_dv ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Unrel_c_dv_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_Unrel_c_dv_compl_2 <- iv_robust(Count_Unreliable_NewsG_Score_dv ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Unrel_c_dv_compl_2)






texreg(list(lm_adj_Unrel_c_dv,ivreg_Unrel_c_dv_compl_1,ivreg_Unrel_c_dv_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Count of Unreliable News Viewed (Treatment Period)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobil)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age-Squared",
                             "Trust in Media (wave 1)","Count of unreliable news (pre-treatment)","Log of news viewed"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))








################## Count of Reliable ##############################################


data_for_analysis <- Pulse_data %>% ungroup() %>%  select(Count_Reliable_NewsG_Score_dv,
                                           Count_Reliable_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names_of_columns <- c(names_of_columns,'Treated')


names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


lm_adj_rel_c_dv <- lm_robust(Count_Reliable_NewsG_Score_dv ~ ., data = data_for_analysis)
summary(lm_adj_rel_c_dv)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))


#CACE Model 1
ivreg_rel_c_dv_compl_1 <- iv_robust(Count_Reliable_NewsG_Score_dv ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_rel_c_dv_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_3)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))



ivreg_rel_c_dv_compl_2 <- iv_robust(Count_Reliable_NewsG_Score_dv ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_rel_c_dv_compl_2)






texreg(list(lm_adj_rel_c_dv,ivreg_rel_c_dv_compl_1,ivreg_rel_c_dv_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Count of Reliable News Viewed (Treatment Period)",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","News consumption (news on desktop)","News consumption (news on mobile)","Party ID","Education",
                             "Age","Count of rreliable news (pre-treatment)","Log of news viewed"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))




#Misperceptions:




######## Research Question: Effect on Belief in Misinformation ##############################


################################# BLM misinfo ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(BLM_Misinfo_Index_w2,
                                            Treated,
                                            gender_dummy_fem,
                                            educ_score,
                                            Age,
                                            Age_Sq,
                                            party_score,
                                            race_white,
                                            ideo_score,
                                            Trust_Media_w1,
                                            trust_news,
                                            trust_news_sm,
                                            cons_news_n,
                                            cons_cable,
                                            cons_print,
                                            cons_public, 
                                            cons_talk,
                                            cons_desk,
                                            cons_mobile,
                                            Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_BLM_Misinfo <- lm_robust(BLM_Misinfo_Index_w2 ~ ., data = data_for_analysis)
summary(lm_adj_BLM_Misinfo)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_BLM_Misinfo_compl_1 <- iv_robust(BLM_Misinfo_Index_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_BLM_Misinfo_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_BLM_Misinfo_compl_2 <- iv_robust(BLM_Misinfo_Index_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_BLM_Misinfo_compl_2)




texreg(list(lm_adj_BLM_Misinfo,ivreg_BLM_Misinfo_compl_1,ivreg_BLM_Misinfo_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Belief in Misinformation about the Black Lives Matter Movement",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age",
                             "Trust in Media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))



#Moderator - Belief in BLM misinfo

#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

lm_adj_DL_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*DL_inverse + . - Total_DL, data = data_for_analysis)
summary(lm_adj_DL_BLM)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_S_Misinfo_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Total_Science_Misinfo + . - Total_DL, data = data_for_analysis)
summary(lm_adj_S_Misinfo_BLM)


#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Age_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Age + . - Total_DL, data = data_for_analysis)
summary(lm_adj_Age_BLM)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_SM_use_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Social_Media_Use + ., data = data_for_analysis)
summary(lm_adj_SM_use_BLM)



#Moderator:  mean_cons

dataframe_1 <- dataframe_1 %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_consump_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*mean_cons + . - cons_desk - cons_mobile, data = data_for_analysis)
summary(lm_consump_BLM)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Part_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*abs_part + ., data = data_for_analysis)
summary(lm_adj_Part_BLM)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Prop_BLM <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Prop_Unreliable_NewsG_Score + ., data = data_for_analysis)
summary(lm_adj_Prop_BLM)



################################# Covid misinfo ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Covid_Misinfo_Index_w2,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Covid_Misinfo <- lm_robust(Covid_Misinfo_Index_w2 ~ ., data = data_for_analysis)
summary(lm_adj_Covid_Misinfo)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_Covid_Misinfo_compl_1 <- iv_robust(Covid_Misinfo_Index_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Covid_Misinfo_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_Covid_Misinfo_compl_2 <- iv_robust(Covid_Misinfo_Index_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Covid_Misinfo_compl_2)






texreg(list(lm_adj_Covid_Misinfo,ivreg_Covid_Misinfo_compl_1,ivreg_Covid_Misinfo_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Belief in Misinformation about Covid-19",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age-Squared",
                             "Trust in Media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))


#Moderator - Belief in Covid misinfo

#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

lm_adj_DL_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*DL_inverse + . - Total_DL, data = data_for_analysis)
summary(lm_adj_DL_Covid)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_S_Misinfo_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Total_Science_Misinfo + . - Total_DL, data = data_for_analysis)
summary(lm_adj_S_Misinfo_Covid)


#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Age_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Age + . - Total_DL, data = data_for_analysis)
summary(lm_adj_Age_Covid)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_SM_use_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Social_Media_Use + ., data = data_for_analysis)
summary(lm_adj_SM_use_Covid)



#Moderator:  mean_cons

dataframe_1 <- dataframe_1 %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_consump_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*mean_cons + . - cons_desk - cons_mobile, data = data_for_analysis)
summary(lm_adj_consump_Covid)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Part_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*abs_part + ., data = data_for_analysis)
summary(lm_adj_Part_Covid)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

lm_adj_Prop_Covid <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Prop_Unreliable_NewsG_Score + ., data = data_for_analysis)
summary(lm_adj_Prop_Covid)







################################# BLM info ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(BLM_info_Index_w2,
                                                          Treated,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_BLM_info <- lm_robust(BLM_info_Index_w2 ~ ., data = data_for_analysis)
summary(lm_adj_BLM_info)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_BLM_info_compl_1 <- iv_robust(BLM_info_Index_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_BLM_info_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_BLM_info_compl_2 <- iv_robust(BLM_info_Index_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_BLM_info_compl_2)




texreg(list(lm_adj_BLM_info,ivreg_BLM_info_compl_1,ivreg_BLM_info_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Belief in True Information about the Black Lives Matter Movement",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age","Age-Squared",
                             "Trust in Media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))






################################# Covid info ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Covid_info_Index_w2,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

names_of_columns <- c('Treated',names_of_columns)

#names_of_columns

#Reporting unadjusted (differences in means) and covariate-adjusted 
#(OLS) estimates of treatment effects. We will use HC2 robust standard errors in all analyses and report 
#$p$-values from two-tailed $t$-tests.

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns)]

data_for_analysis <- dataframe_1[, names.use]

lm_adj_Covid_info <- lm_robust(Covid_info_Index_w2 ~ ., data = data_for_analysis)
summary(lm_adj_Covid_info)


names_of_columns_2 <- c(names_of_columns,'compliance_check_1')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_2)]

data_for_analysis <- dataframe_1[, names.use]

#CACE Model 1
ivreg_Covid_info_compl_1 <- iv_robust(Covid_info_Index_w2 ~ . - compliance_check_1 | . - Treated , data = data_for_analysis)


summary(ivreg_Covid_info_compl_1)

# #CACE Model 2 - Passed first and second wave compliance check

names_of_columns_3 <- c(names_of_columns,'Complied')

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_3)]

data_for_analysis <- dataframe_1[, names.use]


ivreg_Covid_info_compl_2 <- iv_robust(Covid_info_Index_w2 ~  . - Complied | . - Treated, data = data_for_analysis)

summary(ivreg_Covid_info_compl_2)






texreg(list(lm_adj_Covid_info,ivreg_Covid_info_compl_1,ivreg_Covid_info_compl_2),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing the Effect of the Intervention on Belief in True Information about Covid-19",
       label = "table:CACE_2_hyp_1_3",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment", "Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Race/Ethnicity","Education","Gender","Ideology","Age",
                             "Trust in Media (wave 1)"),
       custom.model.names= c("Intent-To-Treat (ITT)", "CACE (Model 1)","CACE (Model 2)"))






#Moderator - Trust in Media


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Trust_Media_w2,
                                                          Treated,
                                                          Trust_Media_w1,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}


#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$DL_inverse


lm_adj_MT_DL <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - Total_DL - DL_inverse, data = data_for_analysis)
summary(lm_adj_MT_DL)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Total_Science_Misinfo


lm_adj_MT_S_Misinfo <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - Total_DL - Total_Science_Misinfo, data = data_for_analysis)
summary(lm_adj_MT_S_Misinfo)

#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Age


lm_adj_MT_Age <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - Total_DL - Age, data = data_for_analysis)
summary(lm_adj_MT_Age)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Social_Media_Use


lm_adj_MT_SM_use <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - Social_Media_Use, data = data_for_analysis)
summary(lm_adj_MT_SM_use)



#Moderator:  mean_cons

dataframe_1 <- dataframe_1 %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$mean_cons

lm_adj_MT_consump <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - cons_desk - cons_mobile - mean_cons, data = data_for_analysis)
summary(lm_adj_MT_consump)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$abs_part

lm_adj_MT_Part <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - abs_part, data = data_for_analysis)
summary(lm_adj_MT_Part)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Prop_Unreliable_NewsG_Score

lm_adj_MT_Prop_Unrel <- lm_robust(Trust_Media_w2 ~ Treated*Moderator + . - Prop_Unreliable_NewsG_Score, data = data_for_analysis)
summary(lm_adj_MT_Prop_Unrel)




texreg(list(lm_adj_MT_DL,lm_adj_MT_S_Misinfo,lm_adj_MT_Age,lm_adj_MT_SM_use,lm_adj_MT_consump,lm_adj_MT_Part,lm_adj_MT_Prop_Unrel),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention Using Different Moderators",
       label = "table:adj_hyp_1_1",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Moderator","Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","Trust of news on social media","Trust of news in newspapers","Party ID",
                             "Race/Ethnicity","Education","Gender","Ideology","Age-Squared","Trust in Media (wave 1)","Moderator*Treatment"),
       custom.model.names= c("Dig. Lit. (Inverse)", "Sci. Misinf.","Age","S.M. Use","News Consump.","Partisanship of News","Unreliable News"))












#BLM_Misinfo_Index_w2



################################# BLM misinfo ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(BLM_Misinfo_Index_w2,
                                                          Treated,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}


#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$DL_inverse


lm_adj_MT_DL <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - DL_inverse, data = data_for_analysis)
summary(lm_adj_MT_DL)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Total_Science_Misinfo


lm_adj_MT_S_Misinfo <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - Total_Science_Misinfo, data = data_for_analysis)
summary(lm_adj_MT_S_Misinfo)

#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Age


lm_adj_MT_Age <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - Age, data = data_for_analysis)
summary(lm_adj_MT_Age)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Social_Media_Use


lm_adj_MT_SM_use <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - Social_Media_Use, data = data_for_analysis)
summary(lm_adj_MT_SM_use)



#Moderator:  mean_cons

dataframe_1 <- dataframe_1 %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$mean_cons

lm_adj_MT_consump <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - cons_desk - cons_mobile - mean_cons, data = data_for_analysis)
summary(lm_adj_MT_consump)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$abs_part

lm_adj_MT_Part <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - abs_part, data = data_for_analysis)
summary(lm_adj_MT_Part)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Prop_Unreliable_NewsG_Score

lm_adj_MT_Prop_Unrel <- lm_robust(BLM_Misinfo_Index_w2 ~ Treated*Moderator + . - Prop_Unreliable_NewsG_Score, data = data_for_analysis)
summary(lm_adj_MT_Prop_Unrel)




texreg(list(lm_adj_MT_DL,lm_adj_MT_S_Misinfo,lm_adj_MT_Age,lm_adj_MT_SM_use,lm_adj_MT_consump,lm_adj_MT_Part,lm_adj_MT_Prop_Unrel),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention Using Different Moderators on Belief in BLM Misinformation",
       label = "table:adj_hyp_1_1",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Moderator","Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age",
                             "Trust in Media (wave 1)","Moderator*Treatment"),
       custom.model.names= c("Dig. Lit. (Inverse)", "Sci. Misinf.","Age","S.M. Use","News Consump.","Partisanship of News","Unreliable News"))









################################# Covid misinfo ################################

#log_news


data_for_analysis <- dataframe_1 %>% ungroup() %>% select(Covid_Misinfo_Index_w2,
                                                          gender_dummy_fem,
                                                          educ_score,
                                                          Age,
                                                          Age_Sq,
                                                          party_score,
                                                          race_white,
                                                          ideo_score,
                                                          Trust_Media_w1,
                                                          trust_news,
                                                          trust_news_sm,
                                                          cons_news_n,
                                                          cons_cable,
                                                          cons_print,
                                                          cons_public, 
                                                          cons_talk,
                                                          cons_desk,
                                                          cons_mobile,
                                                          Safari_dummy)

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

colnames(x)

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}
names_of_columns <- c('Treated',names_of_columns)

#DL_inverse
names_of_columns_M1 <- c('Total_DL',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$DL_inverse


lm_adj_MT_DL <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - DL_inverse, data = data_for_analysis)
summary(lm_adj_MT_DL)

#Scientific Misinformation
names_of_columns_M1 <- c('Total_Science_Misinfo',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Total_Science_Misinfo


lm_adj_MT_S_Misinfo <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - Total_Science_Misinfo, data = data_for_analysis)
summary(lm_adj_MT_S_Misinfo)

#Age
names_of_columns_M1 <- c('Age',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M1)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Age


lm_adj_MT_Age <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - Total_DL - Age, data = data_for_analysis)
summary(lm_adj_MT_Age)


#SM Use
names_of_columns_M2 <- c('Social_Media_Use',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Social_Media_Use


lm_adj_MT_SM_use <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - Social_Media_Use, data = data_for_analysis)
summary(lm_adj_MT_SM_use)



#Moderator:  mean_cons

dataframe_1 <- dataframe_1 %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('mean_cons',names_of_columns)

names.use <- names(dataframe_1)[(names(dataframe_1) %in% names_of_columns_M2)]

data_for_analysis <- dataframe_1[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$mean_cons

lm_adj_MT_consump <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - cons_desk - cons_mobile - mean_cons, data = data_for_analysis)
summary(lm_adj_MT_consump)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$abs_part

lm_adj_MT_Part <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - abs_part, data = data_for_analysis)
summary(lm_adj_MT_Part)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Prop_Unreliable_NewsG_Score

lm_adj_MT_Prop_Unrel <- lm_robust(Covid_Misinfo_Index_w2 ~ Treated*Moderator + . - Prop_Unreliable_NewsG_Score, data = data_for_analysis)
summary(lm_adj_MT_Prop_Unrel)




texreg(list(lm_adj_MT_DL,lm_adj_MT_S_Misinfo,lm_adj_MT_Age,lm_adj_MT_SM_use,lm_adj_MT_consump,lm_adj_MT_Part,lm_adj_MT_Prop_Unrel),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention Using Different Moderators on Belief in Covid Misinformation",
       label = "table:adj_hyp_1_1",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Moderator","Web Browser (Safari)","News consumption (network news)","News consumption (cable news)",
                             "News consumption (print news)","News consumption (public radio)","News consumption (talk radio)",
                             "News consumption (news on desktop)","News consumption (news on mobile)","Trust of news on social media",
                             "Trust of news in newspapers","Party ID","Race/Ethnicity","Education","Gender","Ideology","Age-Squared",
                             "Trust in Media (wave 1)","Moderator*Treatment"),
       custom.model.names= c("Dig. Lit. (Inverse)", "Sci. Misinf.","Age","S.M. Use","News Consump.","Partisanship of News","Unreliable News"))





################################# Unreliable Proportion ################################

#log_news




data_for_analysis <- Pulse_data %>% ungroup() %>% select(Prop_Unreliable_NewsG_Score_post,
                                                         Prop_Unreliable_NewsG_Score,
                                                         gender_dummy_fem,
                                                         educ_score,
                                                         Age,
                                                         Age_Sq,
                                                         party_score,
                                                         race_white,
                                                         ideo_score,
                                                         Trust_Media_w1,
                                                         trust_news,
                                                         trust_news_sm,
                                                         cons_news_n,
                                                         cons_cable,
                                                         cons_print,
                                                         cons_public, 
                                                         cons_talk,
                                                         cons_desk,
                                                         cons_mobile,
                                                         Safari_dummy,
                                                         log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}

#DL_inverse
names_of_columns_M1 <- c('Treated','Total_DL',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$DL_inverse


lm_adj_MT_DL <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - DL_inverse, data = data_for_analysis)
summary(lm_adj_MT_DL)

#Scientific Misinformation
names_of_columns_M1 <- c('Treated','Total_Science_Misinfo',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Total_Science_Misinfo


lm_adj_MT_S_Misinfo <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - Total_Science_Misinfo, data = data_for_analysis)
summary(lm_adj_MT_S_Misinfo)

#Age
names_of_columns_M1 <- c('Treated','Age',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Age


lm_adj_MT_Age <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - Age, data = data_for_analysis)
summary(lm_adj_MT_Age)


#SM Use
names_of_columns_M2 <- c('Treated','Social_Media_Use',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Social_Media_Use


lm_adj_MT_SM_use <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - Social_Media_Use, data = data_for_analysis)
summary(lm_adj_MT_SM_use)



#Moderator:  mean_cons

Pulse_data <- Pulse_data %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('Treated','mean_cons',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$mean_cons

lm_adj_MT_consump <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - cons_desk - cons_mobile - mean_cons, data = data_for_analysis)
summary(lm_adj_MT_consump)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('Treated','abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$abs_part

lm_adj_MT_Part <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - abs_part, data = data_for_analysis)
summary(lm_adj_MT_Part)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Treated','Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Prop_Unreliable_NewsG_Score

lm_adj_MT_Prop_Unrel <- lm_robust(Prop_Unreliable_NewsG_Score_post ~ Treated*Moderator + . - Prop_Unreliable_NewsG_Score, data = data_for_analysis)
summary(lm_adj_MT_Prop_Unrel)




texreg(list(lm_adj_MT_DL,lm_adj_MT_S_Misinfo,lm_adj_MT_Age,lm_adj_MT_SM_use,lm_adj_MT_consump,lm_adj_MT_Part,lm_adj_MT_Prop_Unrel),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention Using Different Moderators on Belief in Covid Misinformation",
       label = "table:adj_hyp_1_1",
       include.rmse = FALSE,
       custom.coef.names = c("Treatment","Moderator","News consumption (desktop)","Trust of news in newspapers","Race/Ethnicity",
                             "Education","Age-Squared","Proportion (unreliable news)","Moderator*Treatment"),
       custom.model.names= c("Dig. Lit. (Inverse)", "Sci. Misinf.","Age","S.M. Use","News Consump.","Partisanship of News","Unreliable News"))





################################# Domain Score ################################

#log_news

data_for_analysis <- Pulse_data %>% ungroup() %>% select(Average_domain_NewsG_Score_post,
                                           Average_domain_NewsG_Score,
                                           gender_dummy_fem,
                                           educ_score,
                                           Age,
                                           Age_Sq,
                                           party_score,
                                           race_white,
                                           ideo_score,
                                           Trust_Media_w1,
                                           trust_news,
                                           trust_news_sm,
                                           cons_news_n,
                                           cons_cable,
                                           cons_print,
                                           cons_public, 
                                           cons_talk,
                                           cons_desk,
                                           cons_mobile,
                                           Safari_dummy,
                                           log_news)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis <- na.omit(data_for_analysis)

y <- as.matrix(data_for_analysis[,1])
# covariates start in column 2
x <- as.matrix(data_for_analysis[,-1])

#k-fold cross-validation for glmnet returns a value for lambda

# (glmnet can fit linear, logistic, multinomial, poisson, and Cox regression models)

set.seed(938)
fit1 = glmnet(x,y, family="gaussian")
cvob1 = cv.glmnet(x,y)
coefficients <- coef(fit1,s=cvob1$lambda.min)


data_for_regression = data_for_analysis[,1]
names_of_columns = colnames(data_for_analysis)[1]
for(i in 2:nrow(coefficients)){
  if(coefficients[i,1] != 0){
    z=i-1
    data_for_regression = cbind(data_for_regression,data_for_analysis[,i])
    names_of_columns <- c(names_of_columns,colnames(data_for_analysis)[i])
  }
}









#DL_inverse
names_of_columns_M1 <- c('Treated','Total_DL',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$DL_inverse <- abs(66-data_for_analysis$Total_DL)

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$DL_inverse


lm_adj_MT_DL <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - DL_inverse, data = data_for_analysis)
summary(lm_adj_MT_DL)

#Scientific Misinformation
names_of_columns_M1 <- c('Treated','Total_Science_Misinfo',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Total_Science_Misinfo


lm_adj_MT_S_Misinfo <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - Total_Science_Misinfo, data = data_for_analysis)
summary(lm_adj_MT_S_Misinfo)

#Age
names_of_columns_M1 <- c('Treated','Age',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M1)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Age


lm_adj_MT_Age <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - Total_DL - Age, data = data_for_analysis)
summary(lm_adj_MT_Age)


#SM Use
names_of_columns_M2 <- c('Treated','Social_Media_Use',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Social_Media_Use


lm_adj_MT_SM_use <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - Social_Media_Use, data = data_for_analysis)
summary(lm_adj_MT_SM_use)



#Moderator:  mean_cons

Pulse_data <- Pulse_data %>% group_by(visa1) %>% mutate(mean_cons = mean(c(cons_desk,cons_mobile),na.rm=T))

names_of_columns_M2 <- c('Treated','mean_cons',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis$mean_cons

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$mean_cons

lm_adj_MT_consump <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - cons_desk - cons_mobile - mean_cons, data = data_for_analysis)
summary(lm_adj_MT_consump)


#Pulse (absolute partisanship)

Pulse_data$abs_part <- abs(Pulse_data$partisanship_news_diet)

names_of_columns_M2 <- c('Treated','abs_part',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$abs_part

lm_adj_MT_Part <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - abs_part, data = data_for_analysis)
summary(lm_adj_MT_Part)






#Pulse (Pre-unreliable)

names_of_columns_M2 <- c('Treated','Prop_Unreliable_NewsG_Score',names_of_columns)

names.use <- names(Pulse_data)[(names(Pulse_data) %in% names_of_columns_M2)]

data_for_analysis <- Pulse_data[, names.use]

data_for_analysis <- do.call(data.frame,                      # Replace Inf in data by NA
                             lapply(data_for_analysis,
                                    function(x) replace(x, is.infinite(x), NA)))

data_for_analysis$Moderator <- data_for_analysis$Prop_Unreliable_NewsG_Score

lm_adj_MT_Prop_Unrel <- lm_robust(Average_domain_NewsG_Score_post ~ Treated*Moderator + . - Prop_Unreliable_NewsG_Score, data = data_for_analysis)
summary(lm_adj_MT_Prop_Unrel)




texreg(list(lm_adj_MT_DL,lm_adj_MT_S_Misinfo,lm_adj_MT_Age,lm_adj_MT_SM_use,lm_adj_MT_consump,lm_adj_MT_Part,lm_adj_MT_Prop_Unrel),
       include.ci = FALSE,
       digits=4,
       omit.coef = '(Intercept)',
       caption= "Testing Effect of Intervention Using Different Moderators on",
       label = "table:adj_hyp_1_1",
       custom.coef.names = c("Treatment","Moderator","News consumption (public radio)",
                             "News consumption (desktop)","Trust of news on social media","Trust of news in newspapers",
                             "Education","Ideology","Age","Avg. Reliability Score (pre-treatment)","Log of news viewed","Moderator*Treatment"),
       include.rmse = FALSE,
       custom.model.names= c("Dig. Lit. (Inverse)", "Sci. Misinf.","Age","S.M. Use","News Consump.","Partisanship of News","Unreliable News"))



###################################    Figures     #####################################################



TP_data <- Pulse_data %>% filter(Treated == 1)
CP_data <- Pulse_data %>% filter(Treated == 0)

0.0556/mean(dataframe_1$Trust_Media_w1,na.rm=T)

0.08/mean(dataframe_1$BLM_Misinfo_Index_w2,na.rm=T)

0.08/mean(dataframe_1$Covid_Misinfo_Index_w2,na.rm=T)

.0117/mean(CP_data$Prop_Unreliable_NewsG_Score,na.rm=T)


.0117/mean(TP_data$Prop_Unreliable_NewsG_Score,na.rm=T)


.0117/mean(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T)

1.11/mean(Pulse_data$Average_domain_NewsG_Score,na.rm=T)



# Behavior Data




Period <- c('Before July 1st',
           'July 1st - July 13th',
           'Before July 1st',
           'July 1st - July 13th',
           'Before July 1st',
           'July 1st - July 13th',
           'Before July 1st',
           'July 1st - July 13th',
           'Before July 1st',
           'July 1st - July 13th')



Coef_names <- c('Proportion of Online News Consumed that is Unreliable',
                'Proportion of Online News Consumed that is Unreliable',
                'Count of Online News Consumed that is Unreliable',
                'Count of Online News Consumed that is Unreliable',
                'Proportion of Online News Consumed that is Reliable',
                'Proportion of Online News Consumed that is Reliable',
                'Count of Online News Consumed that is Reliable',
                'Count of Online News Consumed that is Reliable',
                'Average Reliability Score of Online News Consumed',
                'Average Reliability Score of Online News Consumed')



Coefficients <- c(ivreg_Unrel_dv_compl_2$coefficients[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_Post_compl_2$coefficients[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_c_dv_compl_2$coefficients[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_c_Post_compl_2$coefficients[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Rel_dv_compl_2$coefficients[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
                  ivreg_Rel_Post_compl_2$coefficients[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
                  ivreg_rel_c_dv_compl_2$coefficients[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
                  ivreg_rel_c_Post_compl_2$coefficients[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
                  ivreg_news_dv_compl_2$coefficients[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T),
                  ivreg_news_Post_compl_2$coefficients[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T))                 


CI_Upper <- c(ivreg_Unrel_dv_compl_2$conf.high[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_Post_compl_2$conf.high[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_c_dv_compl_2$conf.high[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Unrel_c_Post_compl_2$conf.high[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
                  ivreg_Rel_dv_compl_2$conf.high[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
                  ivreg_Rel_Post_compl_2$conf.high[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
                  ivreg_rel_c_dv_compl_2$conf.high[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
                  ivreg_rel_c_Post_compl_2$conf.high[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
                  ivreg_news_dv_compl_2$conf.high[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T),
                  ivreg_news_Post_compl_2$conf.high[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T))                 



CI_Lower <- c(ivreg_Unrel_dv_compl_2$conf.low[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
              ivreg_Unrel_Post_compl_2$conf.low[2]/sd(Pulse_data$Prop_Unreliable_NewsG_Score,na.rm=T),
              ivreg_Unrel_c_dv_compl_2$conf.low[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
              ivreg_Unrel_c_Post_compl_2$conf.low[2]/sd(Pulse_data$Count_Unreliable_NewsG_Score,na.rm=T),
              ivreg_Rel_dv_compl_2$conf.low[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
              ivreg_Rel_Post_compl_2$conf.low[2]/sd(Pulse_data$Prop_Reliable_NewsG_Score,na.rm=T),
              ivreg_rel_c_dv_compl_2$conf.low[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
              ivreg_rel_c_Post_compl_2$conf.low[2]/sd(Pulse_data$Count_Reliable_NewsG_Score,na.rm=T),
              ivreg_news_dv_compl_2$conf.low[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T),
              ivreg_news_Post_compl_2$conf.low[2]/sd(Pulse_data$Average_domain_NewsG_Score,na.rm=T))                 




d_matrix <- cbind(Period,Coef_names,Coefficients,CI_Upper,CI_Lower)
rownames(d_matrix) <- c()

d_matrix <- data.frame(d_matrix)


d_matrix$Coefficients <- as.character(d_matrix$Coefficients)
d_matrix$CI_Lower <- as.character(d_matrix$CI_Lower)
d_matrix$CI_Upper <- as.character(d_matrix$CI_Upper)

d_matrix$Coefficients <- as.numeric(d_matrix$Coefficients)
d_matrix$CI_Lower <- as.numeric(d_matrix$CI_Lower)
d_matrix$CI_Upper <- as.numeric(d_matrix$CI_Upper)


d_matrix <- d_matrix %>% arrange(desc(row_number()))




d_matrix$x<-c(0.8,0.9,1.3,1.4,1.8,1.9,2.3,2.4,2.8,2.9)



ggplot(data = d_matrix, aes(x = x, y = Coefficients)) +
  geom_hline(aes(yintercept = 0), color = "gray",
             linetype = 2, size = 1.2) +
  geom_point(aes(color = Period, shape=Period),size=4) +
  geom_linerange(aes(min = CI_Lower, 
                     max = CI_Upper, 
                     color = Period),
                 size=1.5) +
  scale_color_manual(values=c('red','blue','purple'), name = "Period") +
  ylab("\n Effect of NewsGuard Intervention on Online Behavioral Measures         \n(1 unit is 1 standard deviation of that measure pre-treatment)         ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  ylim(-0.3,0.3) +
  scale_x_continuous(" \n",breaks=c(2.85,2.35,1.85,1.35,0.85),labels=c('Proportion of Online News\nConsumed that is Unreliable',
                                                                       'Count of Online News\nConsumed that is Unreliable',
                                                              'Proportion of Online News\nConsumed that is Reliable',
                                                              'Count of Online News\nConsumed that is Reliable',
                                                              'Average Reliability Score\nof Online News Consumed'),limits=c(0.5,3.4)) +
  coord_flip()


setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')

ggsave('Behavioral_Coefficients.png',height=14,width=10)















Coef_names <- c('Trust in Media',
                'Trust in CBS',
                'Trust in ABC',
                'Trust in NBC',
                'Trust in CNN',
                'Trust in Fox News',
                'Affective Polarization',
                'Political Cynicism',
                'Belief in BLM Misinformation',
                'Belief in Covid Misinformation',
                'Belief in BLM True information',
                'Belief in Covid True information',
                'Trust in Institutions',
                'Belief that \"fake news is \n a problem\"',
                'Belief that \"fake news is \n a problem in the mainstream media\"')

Coefficients <- c(ivreg_media_trust_compl_2$coefficients[2]/sd(dataframe_1$Trust_Media_w1,na.rm=T),
                  ivreg_CBS_compl_2$coefficients[2]/sd(dataframe_1$CBS_Trust_1,na.rm=T),
                  ivreg_ABC_compl_2$coefficients[2]/sd(dataframe_1$ABC_Trust_1,na.rm=T),
                  ivreg_NBC_compl_2$coefficients[2]/sd(dataframe_1$NBC_Trust_1,na.rm=T),
                  ivreg_CNN_compl_2$coefficients[2]/sd(dataframe_1$CNN_Trust_1,na.rm=T),
                  ivreg_Fox_compl_2$coefficients[2]/sd(dataframe_1$Fox_Trust_1,na.rm=T),
                  ivreg_aff_pol_compl_2$coefficients[2]/sd(dataframe_1$aff_pol_w1,na.rm=T),
                  ivreg_Pol_cyn_compl_2$coefficients[2]/sd(dataframe_1$Pol_cyn_1,na.rm=T),
                  ivreg_BLM_Misinfo_compl_2$coefficients[2]/sd(dataframe_1$BLM_Misinfo_Index_w2,na.rm=T),
                  ivreg_Covid_Misinfo_compl_2$coefficients[2]/sd(dataframe_1$Covid_Misinfo_Index_w2,na.rm=T),
                  ivreg_BLM_info_compl_2$coefficients[2]/sd(dataframe_1$BLM_info_Index_w2,na.rm=T),
                  ivreg_Covid_info_compl_2$coefficients[2]/sd(dataframe_1$Covid_info_Index_w2,na.rm=T),
                  ivreg_Trust_inst_compl_2$coefficients[2]/sd(dataframe_1$Trust_inst_w1,na.rm=T),
                  ivreg_FN_prob_compl_2$coefficients[2]/sd(dataframe_1$SMP4326,na.rm=T),
                  ivreg_FN_prob_main_compl_2$coefficients[2]/sd(dataframe_1$SMP4310,na.rm=T))


CI_Upper <- c(ivreg_media_trust_compl_2$conf.high[2]/sd(dataframe_1$Trust_Media_w1,na.rm=T),
              ivreg_CBS_compl_2$conf.high[2]/sd(dataframe_1$CBS_Trust_1,na.rm=T),
              ivreg_ABC_compl_2$conf.high[2]/sd(dataframe_1$ABC_Trust_1,na.rm=T),
              ivreg_NBC_compl_2$conf.high[2]/sd(dataframe_1$NBC_Trust_1,na.rm=T),
              ivreg_CNN_compl_2$conf.high[2]/sd(dataframe_1$CNN_Trust_1,na.rm=T),
              ivreg_Fox_compl_2$conf.high[2]/sd(dataframe_1$Fox_Trust_1,na.rm=T),
              ivreg_aff_pol_compl_2$conf.high[2]/sd(dataframe_1$aff_pol_w1,na.rm=T),
              ivreg_Pol_cyn_compl_2$conf.high[2]/sd(dataframe_1$Pol_cyn_1,na.rm=T),
              ivreg_BLM_Misinfo_compl_2$conf.high[2]/sd(dataframe_1$BLM_Misinfo_Index_w2,na.rm=T),
              ivreg_Covid_Misinfo_compl_2$conf.high[2]/sd(dataframe_1$Covid_Misinfo_Index_w2,na.rm=T),
              ivreg_BLM_info_compl_2$conf.high[2]/sd(dataframe_1$BLM_info_Index_w2,na.rm=T),
              ivreg_Covid_info_compl_2$conf.high[2]/sd(dataframe_1$Covid_info_Index_w2,na.rm=T),
              ivreg_Trust_inst_compl_2$conf.high[2]/sd(dataframe_1$Trust_inst_w1,na.rm=T),
              ivreg_FN_prob_compl_2$conf.high[2]/sd(dataframe_1$SMP4326,na.rm=T),
              ivreg_FN_prob_main_compl_2$conf.high[2]/sd(dataframe_1$SMP4310,na.rm=T))              

CI_Lower <- c(ivreg_media_trust_compl_2$conf.low[2]/sd(dataframe_1$Trust_Media_w1,na.rm=T),
              ivreg_CBS_compl_2$conf.low[2]/sd(dataframe_1$CBS_Trust_1,na.rm=T),
              ivreg_ABC_compl_2$conf.low[2]/sd(dataframe_1$ABC_Trust_1,na.rm=T),
              ivreg_NBC_compl_2$conf.low[2]/sd(dataframe_1$NBC_Trust_1,na.rm=T),
              ivreg_CNN_compl_2$conf.low[2]/sd(dataframe_1$CNN_Trust_1,na.rm=T),
              ivreg_Fox_compl_2$conf.low[2]/sd(dataframe_1$Fox_Trust_1,na.rm=T),
              ivreg_aff_pol_compl_2$conf.low[2]/sd(dataframe_1$aff_pol_w1,na.rm=T),
              ivreg_Pol_cyn_compl_2$conf.low[2]/sd(dataframe_1$Pol_cyn_1,na.rm=T),
              ivreg_BLM_Misinfo_compl_2$conf.low[2]/sd(dataframe_1$BLM_Misinfo_Index_w2,na.rm=T),
              ivreg_Covid_Misinfo_compl_2$conf.low[2]/sd(dataframe_1$Covid_Misinfo_Index_w2,na.rm=T),
              ivreg_BLM_info_compl_2$conf.low[2]/sd(dataframe_1$BLM_info_Index_w2,na.rm=T),
              ivreg_Covid_info_compl_2$conf.low[2]/sd(dataframe_1$Covid_info_Index_w2,na.rm=T),
              ivreg_Trust_inst_compl_2$conf.low[2]/sd(dataframe_1$Trust_inst_w1,na.rm=T),
              ivreg_FN_prob_compl_2$conf.low[2]/sd(dataframe_1$SMP4326,na.rm=T),
              ivreg_FN_prob_main_compl_2$conf.low[2]/sd(dataframe_1$SMP4310,na.rm=T))                



d_matrix <- cbind(Coef_names,Coefficients,CI_Upper,CI_Lower)
rownames(d_matrix) <- c()

d_matrix <- data.frame(d_matrix)


d_matrix$Coefficients <- as.character(d_matrix$Coefficients)
d_matrix$CI_Lower <- as.character(d_matrix$CI_Lower)
d_matrix$CI_Upper <- as.character(d_matrix$CI_Upper)

d_matrix$Coefficients <- as.numeric(d_matrix$Coefficients)
d_matrix$CI_Lower <- as.numeric(d_matrix$CI_Lower)
d_matrix$CI_Upper <- as.numeric(d_matrix$CI_Upper)


d_matrix <- d_matrix %>% arrange(desc(row_number()))




d_matrix$x<-c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5)



ggplot(data = d_matrix, aes(x = x, y = Coefficients)) +
  geom_hline(aes(yintercept = 0), color = "gray",
             linetype = 2, size = 1.2) +
  geom_point(size=4) +
  geom_linerange(aes(min = CI_Lower, 
                     max = CI_Upper),
                 size=1.5) +
  scale_color_manual(values=c('red','blue','purple'), name = "Period") +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  ylim(-0.3,0.3) +
  scale_x_continuous(" \n",breaks=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5),labels=rev(c('Trust in Media',
                                                                                                              'Trust in CBS',
                                                                                                              'Trust in ABC',
                                                                                                              'Trust in NBC',
                                                                                                              'Trust in CNN',
                                                                                                              'Trust in Fox News',
                                                                                                              'Affective Polarization',
                                                                                                              'Political Cynicism',
                                                                                                              'Belief in BLM Misinformation',
                                                                                                              'Belief in Covid Misinformation',
                                                                                                              'Belief in BLM True information',
                                                                                                              'Belief in Covid True information',
                                                                                                              'Trust in Institutions',
                                                                                                              'Belief that \"fake news is \n a problem\"',
                                                                                                              'Belief that \"fake news is \n a problem in the mainstream media\"')),limits=c(0.0,1.6)) + 
  coord_flip()


setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')

ggsave('Survey_Coefficients.png',height=14,width=10)







TP_data <- Pulse_data %>% filter(Treated == 1)
CP_data <- Pulse_data %>% filter(Treated == 0)

CP_data$Prop_Unreliable_NewsG_Score
TP_data$Prop_Unreliable_NewsG_Score

CP_data$Prop_Unreliable_NewsG_Score_post
TP_data$Prop_Unreliable_NewsG_Score_post

CP_data$Prop_Unreliable_NewsG_Score_dv
TP_data$Prop_Unreliable_NewsG_Score_dv



TP_data <- TP_data %>% ungroup() %>% select(caseid,Prop_Unreliable_NewsG_Score,Prop_Unreliable_NewsG_Score_post)

TP_data <- na.omit(TP_data)

data_T_Pre <- cbind(TP_data$caseid,TP_data$Prop_Unreliable_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(TP_data$caseid,TP_data$Prop_Unreliable_NewsG_Score_post,'Post-Treatment')

colnames(data_T_Pre) <- c('caseid','Prop_unrel','Group')
colnames(data_T_Post) <- c('caseid','Prop_unrel','Group')

data_T <- rbind(data_T_Pre,data_T_Post)

data_T <- as.data.frame(data_T)

data_T$Prop_unrel <- as.character(data_T$Prop_unrel)
data_T$Prop_unrel <- as.numeric(data_T$Prop_unrel)



data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.0','0.5-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0 & Prop_unrel <= 0.005,'0.0-0.005',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.005 & Prop_unrel <= 0.01,'0.005-0.01',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.01 & Prop_unrel <= 0.02,'0.01-0.02',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.02 & Prop_unrel <= 0.03,'0.02-0.03',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.03 & Prop_unrel <= 0.04,'0.03-0.045',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.045 & Prop_unrel <= 0.06,'0.045-0.06',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.06 & Prop_unrel <= 0.075,'0.06-0.075',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.075 & Prop_unrel <= 0.10,'0.075-0.10',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 0.15,'0.10-0.15',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.15 & Prop_unrel <= 0.25,'0.15-0.25',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.25 & Prop_unrel <= 0.5,'0.25-0.5',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.5 & Prop_unrel <= 1.0,'0.5-1.00',Prop_G))



data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.0',
                                        '0.0-0.005',
                                        '0.005-0.01',
                                        '0.01-0.02',
                                        '0.02-0.03',
                                        '0.03-0.045',
                                        '0.045-0.06',
                                        '0.06-0.075',
                                        '0.075-0.10',
                                        '0.10-0.15',
                                        '0.15-0.25',
                                        '0.25-0.5',
                                        '0.5-1.00'))

                   
  
data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)
  
summarise by group!!!!!!!!!
  
  
data_T_2 <- na.omit(data_T_2)

  
ggplot(data=data_T_2, aes(x=Prop_G,y=n, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity") +
  scale_colour_manual(values=c("red","blue")) +
  scale_fill_manual(values=c("red","blue")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
    theme(axis.title.x = element_text(size=16),
          axis.text.x  = element_text(size=16),
          axis.title.y = element_text(size=16),
          axis.text.y  = element_text(size=16),
          plot.title = element_text(size = 16),
          legend.title = element_text(size=16),
          legend.text = element_text(size=14))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_1_Treat.png',width =15)





data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.00','0.50-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.0 & Prop_unrel <= 0.01,'0.00-0.01',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.01 & Prop_unrel <= 0.05,'0.01-0.05',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.05 & Prop_unrel <= 0.10,'0.05-0.10',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 0.25,'0.10-0.25',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.25 & Prop_unrel <= 0.5,'0.25-0.50',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.5 & Prop_unrel <= 1.0,'0.5-1.00',Prop_G))


data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.00',
                                               '0.00-0.01',
                                               '0.01-0.05',
                                               '0.05-0.10',
                                               '0.10-0.25',
                                               '0.25-0.50',
                                               '0.5-1.00'))



data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)

summarise by group!!!!!!!!!
  
  
  data_T_2 <- na.omit(data_T_2)

data_T_2$Group <- factor(data_T_2$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data=data_T_2, aes(x=Prop_G,y=n, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity",width=1) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Count of Respondents\n') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"),alpha=guide_legend(title="Period"))



setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_2_Treat.png',width =15)




#data_T <- merge(data_T_Pre,data_T_Post,by='caseid')

data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  coord_cartesian(xlim=c(0,0.05)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_3_Treat.png',width =12)

data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density\n') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_4_Treat.png',width =12)



























CP_data <- CP_data %>% ungroup() %>% select(caseid,Prop_Unreliable_NewsG_Score,Prop_Unreliable_NewsG_Score_post)

CP_data <- na.omit(CP_data)

data_T_Pre <- cbind(CP_data$caseid,CP_data$Prop_Unreliable_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(CP_data$caseid,CP_data$Prop_Unreliable_NewsG_Score_post,'Post-Treatment')

colnames(data_T_Pre) <- c('caseid','Prop_unrel','Group')
colnames(data_T_Post) <- c('caseid','Prop_unrel','Group')

data_T <- rbind(data_T_Pre,data_T_Post)

data_T <- as.data.frame(data_T)

data_T$Prop_unrel <- as.character(data_T$Prop_unrel)
data_T$Prop_unrel <- as.numeric(data_T$Prop_unrel)



data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.0','0.5-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0 & Prop_unrel <= 0.005,'0.0-0.005',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.005 & Prop_unrel <= 0.01,'0.005-0.01',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.01 & Prop_unrel <= 0.02,'0.01-0.02',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.02 & Prop_unrel <= 0.03,'0.02-0.03',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.03 & Prop_unrel <= 0.04,'0.03-0.045',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.04 & Prop_unrel <= 0.06,'0.045-0.06',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.06 & Prop_unrel <= 0.075,'0.06-0.075',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.075 & Prop_unrel <= 0.10,'0.075-0.10',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 0.15,'0.10-0.15',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.15 & Prop_unrel <= 0.25,'0.15-0.25',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.25 & Prop_unrel <= 0.5,'0.25-0.5',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.5 & Prop_unrel <= 1.0,'0.5-1.00',Prop_G))


data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.0',
                                               '0.0-0.005',
                                               '0.005-0.01',
                                               '0.01-0.02',
                                               '0.02-0.03',
                                               '0.03-0.045',
                                               '0.045-0.06',
                                               '0.06-0.075',
                                               '0.075-0.10',
                                               '0.10-0.15',
                                               '0.15-0.25',
                                               '0.25-0.5',
                                               '0.5-1.00'))



data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)

ggplot(data=data_T_2, aes(x=Prop_G,y=n, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity") +
  scale_colour_manual(values=c("red","blue")) +
  scale_fill_manual(values=c("red","blue")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_1.png',width =15)





data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.00','0.50-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.0 & Prop_unrel <= 0.01,'0.00-0.01',data_T$Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.01 & Prop_unrel <= 0.05,'0.01-0.05',data_T$Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.05 & Prop_unrel <= 0.10,'0.05-0.10',data_T$Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 0.25,'0.10-0.25',data_T$Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.25 & Prop_unrel <= 0.5,'0.25-0.50',data_T$Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.5 & Prop_unrel <= 1.0,'0.5-1.00',data_T$Prop_G))


data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.00',
                                               '0.00-0.01',
                                               '0.01-0.05',
                                               '0.05-0.10',
                                               '0.10-0.25',
                                               '0.25-0.50',
                                               '0.5-1.00'))



data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)
  
data_T_2 <- na.omit(data_T_2)

data_T_2$Group <- factor(data_T_2$Group,levels=c('Pre-Treatment',
                                                 'Post-Treatment'))

ggplot(data=data_T_2, aes(x=Prop_G,y=n, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity",width=1) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Count of Respondents\n') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"),alpha=guide_legend(title="Period"))



setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_2.png',width =15)



data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  coord_cartesian(xlim=c(0,0.05)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_3.png',width =12)

data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density\n') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_4.png',width =12)






#Treatment:

TP_data <- Pulse_data %>% filter(Treated == 1)

TP_data <- TP_data %>% ungroup() %>% select(caseid,Prop_Unreliable_NewsG_Score,Prop_Unreliable_NewsG_Score_post)

TP_data <- na.omit(TP_data)

data_T_Pre <- cbind(TP_data$caseid,TP_data$Prop_Unreliable_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(TP_data$caseid,TP_data$Prop_Unreliable_NewsG_Score_post,'Post-Treatment')

colnames(data_T_Pre) <- c('caseid','Prop_unrel','Group')
colnames(data_T_Post) <- c('caseid','Prop_unrel','Group')

data_T <- rbind(data_T_Pre,data_T_Post)

colnames(data_T_Pre) <- c('caseid','Pre','Group')
colnames(data_T_Post) <- c('caseid','Post','Group')


scatter_data_Treat <- merge(data_T_Pre,data_T_Post,by='caseid')


scatter_data_Treat$Pre <- as.character(scatter_data_Treat$Pre)
scatter_data_Treat$Pre <- as.numeric(scatter_data_Treat$Pre)


scatter_data_Treat$Post <- as.character(scatter_data_Treat$Post)
scatter_data_Treat$Post <- as.numeric(scatter_data_Treat$Post)

data_T <- as.data.frame(data_T)

data_T$Prop_unrel <- as.character(data_T$Prop_unrel)
data_T$Prop_unrel <- as.numeric(data_T$Prop_unrel)


data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  coord_cartesian(xlim=c(0,0.1)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_1_Treat.png',width =12)

data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=5) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density\n') +
  coord_cartesian(xlim=c(0.1,1.00),ylim=c(0,5)) +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_2_Treat.png',width =12)





data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.00','0.50-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.0 & Prop_unrel <= 0.02,'0.00-0.02',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.02 & Prop_unrel <= 0.10,'0.02-0.10',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 1.0,'0.10-1.00',Prop_G))




Total_T_2 <- data_T %>% group_by(Group) %>% count()

colnames(Total_T_2)[2] <- 'Total'

data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)

data_T_2 <- merge(data_T_2,Total_T_2,by='Group')

data_T_2 <- data_T_2 %>% mutate(Prop = n/Total)

data_T_2$Group <- factor(data_T_2$Group,levels=c('Pre-Treatment',
                                                 'Post-Treatment'))



data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.00',
                                               '0.00-0.02',
                                               '0.02-0.10',
                                               '0.10-1.00'))


ggplot(data=data_T_2, aes(x=Prop_G,y=Prop, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity",width=1) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Proportion of Respondents\n') +
  ylab('Proportion of Respondents\n') + 
  coord_cartesian(ylim=c(0,0.8)) +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"),alpha=guide_legend(title="Period"))



setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_3_Treat.png',width =15)


#Control:

CP_data <- Pulse_data %>% filter(Treated == 0)

CP_data <- CP_data %>% ungroup() %>% select(caseid,Prop_Unreliable_NewsG_Score,Prop_Unreliable_NewsG_Score_post)

CP_data <- na.omit(CP_data)

data_T_Pre <- cbind(CP_data$caseid,CP_data$Prop_Unreliable_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(CP_data$caseid,CP_data$Prop_Unreliable_NewsG_Score_post,'Post-Treatment')
colnames(data_T_Pre) <- c('caseid','Prop_unrel','Group')
colnames(data_T_Post) <- c('caseid','Prop_unrel','Group')

data_T <- rbind(data_T_Pre,data_T_Post)

data_T <- as.data.frame(data_T)

data_T$Prop_unrel <- as.character(data_T$Prop_unrel)
data_T$Prop_unrel <- as.numeric(data_T$Prop_unrel)


data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  coord_cartesian(xlim=c(0,0.05)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_1_Control.png',width =12)

data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Prop_unrel, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=5) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Density\n') +
  coord_cartesian(xlim=c(0.1,1.00),ylim=c(0,5)) +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_2_Control.png',width =12)





data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel == 0,'0.00','0.10-1.00'))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.0 & Prop_unrel <= 0.02,'0.00-0.02',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.02 & Prop_unrel <= 0.10,'0.02-0.10',Prop_G))
data_T <- data_T %>% mutate(Prop_G = ifelse(Prop_unrel > 0.10 & Prop_unrel <= 1.0,'0.10-1.00',Prop_G))







Total_T_2 <- data_T %>% group_by(Group) %>% count()

colnames(Total_T_2)[2] <- 'Total'

data_T_2 <- data_T %>% group_by(Group) %>% count(Prop_G)

data_T_2 <- merge(data_T_2,Total_T_2,by='Group')

data_T_2 <- data_T_2 %>% mutate(Prop = n/Total)

data_T_2$Group <- factor(data_T_2$Group,levels=c('Pre-Treatment',
                                                 'Post-Treatment'))


data_T$Prop_G <- factor(data_T$Prop_G,levels=c('0.00',
                                               '0.00-0.02',
                                               '0.02-0.10',
                                               '0.10-1.00'))


ggplot(data=data_T_2, aes(x=Prop_G,y=Prop, fill=Group, color=Group, alpha=Group)) +
  geom_bar(stat="identity", position ="identity",width=1) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  scale_alpha_manual(values=c(.5, .5)) +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nProportion of online news diet that is from unreliable news sources') +
  ylab('Count of Respondents\n') +
  coord_cartesian(ylim=c(0,0.8)) +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"),alpha=guide_legend(title="Period"))



setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_3_Control.png',width =15)



colnames(data_T_Pre) <- c('caseid','Pre','Group')
colnames(data_T_Post) <- c('caseid','Post','Group')


scatter_data_Control <- merge(data_T_Pre,data_T_Post,by='caseid')


scatter_data_Control$Pre <- as.character(scatter_data_Control$Pre)
scatter_data_Control$Pre <- as.numeric(scatter_data_Control$Pre)


scatter_data_Control$Post <- as.character(scatter_data_Control$Post)
scatter_data_Control$Post <- as.numeric(scatter_data_Control$Post)







ggplot(data=scatter_data, aes(x=Pre,y=Post)) +
  geom_point() +
  theme_classic() +
  coord_cartesian(ylim=c(0,1)) +
  geom_abline(intercept = 0, slope = 1,color='red')


scatter_data_Control$L_G <- 'Control'
scatter_data_Treat$L_G <- 'Treatment'

scatter_full <- rbind(scatter_data_Control,scatter_data_Treat)




ggplot() +
  geom_abline(intercept = 0, slope = 1,color='black',size=2,alpha=0.5) +
  theme_classic() +
  coord_cartesian(ylim=c(0,1)) +
#  geom_polygon(data=tmp_1, aes(x, y), fill="#d8161688",alpha=0.3) +
#  geom_polygon(data=tmp_2, aes(x, y), fill="blue",alpha=0.3) +
  geom_point(data=scatter_full, aes(x=Pre,y=Post,color=L_G),alpha=0.8)

tmp_1 <-  data.frame(x=c(0.25,1,1), y=c(0.0,0.0,0.75))
tmp_2 <-  data.frame(x=c(0,0,0.75), y=c(0.25,1,1))

ggplot() +
  theme_classic() +
  coord_cartesian(ylim=c(0,1),xlim=c(0,1)) +
  geom_smooth(data=scatter_full, aes(x=Pre,y=Post,colour=L_G), method=lm, se=T) +
  geom_smooth(data=scatter_full, aes(x=Pre,y=Post,colour=L_G), method=lm, se=T) +
  geom_point(data=scatter_full, aes(x=Pre,y=Post,color=L_G,shape=L_G),alpha=0.9,size=3) +
  scale_colour_manual(values=c("blue","red")) +
  scale_x_continuous(expand = c(0.01, 0)) +
  scale_y_continuous(expand = c(0.01, 0)) +
  theme(axis.title.x = element_text(size=18),
        axis.text.x  = element_text(size=18),
        axis.title.y = element_text(size=18),
        axis.text.y  = element_text(size=18),
        plot.title = element_text(size = 18),
        legend.title = element_text(size=18),
        legend.text = element_text(size=16),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  xlab('\nProportion of online news diet that is from unreliable news sources (Pre-Treatment)') +
  ylab('Proportion of online news diet that is from unreliable news sources (July 1st-July 13th)\n') +
  guides(shape=guide_legend(title="Group"),color=guide_legend(title="Group"))
  


setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('Scatter_Full.png',width =12,height=12)
  

p <- ggplot(mtcars, aes(hp, wt)) +
  geom_polygon(data=tmp, aes(x, y), fill="#d8161688") +
  geom_point()
  

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('Scatter.png',width =10)




#Treatment:


CP_data <- Pulse_data %>% filter(Treated == 1)

CP_data <- CP_data %>% ungroup() %>% select(caseid,Average_domain_NewsG_Score,Average_domain_NewsG_Score_post)

CP_data <- na.omit(CP_data)

data_T_Pre <- cbind(CP_data$caseid,CP_data$Average_domain_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(CP_data$caseid,CP_data$Average_domain_NewsG_Score_post,'Post-Treatment')
colnames(data_T_Pre) <- c('caseid','Score','Group')
colnames(data_T_Post) <- c('caseid','Score','Group')








data_T <- rbind(data_T_Pre,data_T_Post)

data_T <- as.data.frame(data_T)

data_T$Score <- as.character(data_T$Score)
data_T$Score <- as.numeric(data_T$Score)


data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

ggplot(data_T, aes(x=Score, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nAverage Reliability Score of News Viewed') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_4_Treat.png',width =12)


colnames(data_T_Pre) <- c('caseid','Pre','Group')
colnames(data_T_Post) <- c('caseid','Post','Group')


scatter_data_Treat <- merge(data_T_Pre,data_T_Post,by='caseid')


scatter_data_Treat$Pre <- as.character(scatter_data_Treat$Pre)
scatter_data_Treat$Pre <- as.numeric(scatter_data_Treat$Pre)


scatter_data_Treat$Post <- as.character(scatter_data_Treat$Post)
scatter_data_Treat$Post <- as.numeric(scatter_data_Treat$Post)


CP_data <- Pulse_data %>% filter(Treated == 0)

CP_data <- CP_data %>% ungroup() %>% select(caseid,Average_domain_NewsG_Score,Average_domain_NewsG_Score_post)

CP_data <- na.omit(CP_data)

data_T_Pre <- cbind(CP_data$caseid,CP_data$Average_domain_NewsG_Score,'Pre-Treatment')
data_T_Post <- cbind(CP_data$caseid,CP_data$Average_domain_NewsG_Score_post,'Post-Treatment')
colnames(data_T_Pre) <- c('caseid','Score','Group')
colnames(data_T_Post) <- c('caseid','Score','Group')


data_T <- rbind(data_T_Pre,data_T_Post)

data_T <- as.data.frame(data_T)

data_T$Score <- as.character(data_T$Score)
data_T$Score <- as.numeric(data_T$Score)


data_T$Group <- factor(data_T$Group,levels=c('Pre-Treatment',
                                             'Post-Treatment'))

colnames(data_T_Pre) <- c('caseid','Pre','Group')
colnames(data_T_Post) <- c('caseid','Post','Group')


scatter_data_Control <- merge(data_T_Pre,data_T_Post,by='caseid')


scatter_data_Control$Pre <- as.character(scatter_data_Control$Pre)
scatter_data_Control$Pre <- as.numeric(scatter_data_Control$Pre)


scatter_data_Control$Post <- as.character(scatter_data_Control$Post)
scatter_data_Control$Post <- as.numeric(scatter_data_Control$Post)



ggplot(data_T, aes(x=Score, fill=Group,color=Group)) +
  geom_density(alpha=0.4,adjust=2) +
  scale_colour_manual(values=c("blue","red")) +
  scale_fill_manual(values=c("blue","red")) +
  ylab("\nEffect of NewsGuard Intervention on Perceptions      \n(1 unit is 1 standard deviation of that measure pre-treatment)       ") +
  theme_classic() +
  theme(axis.title.x = element_text(size=16),
        axis.text.x  = element_text(size=16),
        axis.title.y = element_text(size=16),
        axis.text.y  = element_text(size=16),
        plot.title = element_text(size = 16),
        legend.title = element_text(size=16),
        legend.text = element_text(size=14)) +
  xlab('\nAverage Reliability Score of News Viewed') +
  ylab('Density') +
  guides(fill=guide_legend(title="Period"),color=guide_legend(title="Period"))

setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('density_plot_4_Control.png',width =12)













scatter_data_Control$L_G <- 'Control'
scatter_data_Treat$L_G <- 'Treatment'

scatter_full <- rbind(scatter_data_Control,scatter_data_Treat)


tmp_1 <-  data.frame(x=c(25,100,100), y=c(0.0,0.0,75))
tmp_2 <-  data.frame(x=c(0,0,75), y=c(25,100,100))

ggplot() +
  theme_classic() +
  coord_cartesian(ylim=c(0,100),xlim=c(0,100)) +
  geom_point(data=scatter_full, aes(x=Pre,y=Post,color=L_G,shape=L_G),alpha=0.9,size=3) +
  geom_smooth(data=scatter_full, aes(x=Pre,y=Post,colour=L_G), method=lm, se=T) +
geom_smooth(data=scatter_full, aes(x=Pre,y=Post,colour=L_G), method=lm, se=T) +
  scale_colour_manual(values=c("blue","red")) +
  scale_x_continuous(expand = c(0.01, 0)) +
  scale_y_continuous(expand = c(0.01, 0)) +
  theme(axis.title.x = element_text(size=18),
        axis.text.x  = element_text(size=18),
        axis.title.y = element_text(size=18),
        axis.text.y  = element_text(size=18),
        plot.title = element_text(size = 18),
        legend.title = element_text(size=18),
        legend.text = element_text(size=16),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  xlab('\nAverage Reliability Score of Online News Diet (Pre-Treatment)') +
  ylab('Average Reliability Score of Online News Diet (July 1st-July 13th)\n') +
  guides(shape=guide_legend(title="Group"),color=guide_legend(title="Group"))


setwd('/Users/kevinaslett/Documents/NewsGuard_Proj/Data')
ggsave('Scatter_Full_2.png',width =12,height=12)


