cons_talk=col_double(),
cons_desk=col_double(),
cons_mobile=col_double(),
Safari_dummy=col_double(),
log_news=col_double(),
Safari_dummy=col_double(),
IE_dummy=col_double(),
Chrome_dummy=col_double(),
Firefox_dummy=col_double(),
Social_Media_Use=col_double()))
#Read in survey data without digital trace data:
data_frame_1 <- read_csv('./Data/Clean_NewsGuard_Survey_Study.csv',
col_types = cols(
.default= col_character(),
Treated = col_double(),
Pulse_Dummy=col_double(),
Complied=col_double(),
Total_DL =  col_double(),
Inverse_DL = col_double(),
income_score =  col_double(),
Total_Science_Misinfo  =  col_double(),
Social_Media_Use =  col_double(),
mean_cons =  col_double(),
SMP4310=col_double(),
SMP4310_w2=col_double(),
SMP4326=col_double(),
SMP4326_w2=col_double(),
Trust_inst_w2=col_double(),
Trust_inst_w1=col_double(),
BLM_Misinfo_Index_w2=col_double(),
Covid_Misinfo_Index_w2=col_double(),
BLM_info_Index_w2=col_double(),
Covid_info_Index_w2=col_double(),
Pol_cyn_2=col_double(),
Pol_cyn_1=col_double(),
Fox_Trust_2=col_double(),
Fox_Trust_1=col_double(),
CNN_Trust_2=col_double(),
CNN_Trust_1=col_double(),
ABC_Trust_2=col_double(),
ABC_Trust_1=col_double(),
NBC_Trust_2=col_double(),
NBC_Trust_1=col_double(),
CBS_Trust_2=col_double(),
CBS_Trust_1=col_double(),
aff_pol_w2=col_double(),
aff_pol_w1=col_double(),
Trust_Media_w2=col_double(),
Treated=col_double(),
Trust_Media_w1=col_double(),
gender_dummy_fem=col_double(),
educ_score=col_double(),
Age=col_double(),
Age_Sq=col_double(),
party_score=col_double(),
race_white=col_double(),
ideo_score=col_double(),
Trust_Media_w1=col_double(),
trust_news=col_double(),
trust_news_sm=col_double(),
cons_news_n=col_double(),
cons_cable=col_double(),
cons_print=col_double(),
cons_public=col_double(),
cons_talk=col_double(),
cons_desk=col_double(),
cons_mobile=col_double(),
Safari_dummy=col_double(),
IE_dummy=col_double(),
Chrome_dummy=col_double(),
Firefox_dummy=col_double(),
Social_Media_Use=col_double()
))
#Set order of dataset:
data_frame_1 <- data_frame_1[order(data_frame_1$visa1),]
################## Behavioral Measures (Covariate-Adjusted Models) ##############################################
#List of possible variables for inclusion:
list_possible_covariates <- c("gender_dummy_fem",
"educ_score",
"Age",
"Age_Sq",
"party_score",
"race_white",
"ideo_score",
"Trust_Media_w1",
"trust_news",
"trust_news_sm",
"cons_news_n",
"cons_cable",
"cons_print",
"cons_public",
"cons_talk",
"cons_desk",
"cons_mobile",
"log_news",
"Safari_dummy",
"IE_dummy",
"Chrome_dummy",
"Firefox_dummy",
"Social_Media_Use")
#Create Sets of variables to use in models:
list_variables_to_run_1 = list(c('Prop_Unreliable_NewsG_Score_dv','Prop_Unreliable_NewsG_Score'),
c('Prop_Reliable_NewsG_Score_dv','Prop_Reliable_NewsG_Score'),
c('Count_Unreliable_NewsG_Score_dv','Count_Unreliable_NewsG_Score'),
c('Count_Reliable_NewsG_Score_dv','Count_Reliable_NewsG_Score'),
c('Average_domain_NewsG_Score_dv','Average_domain_NewsG_Score'),
c('Prop_Unreliable_NewsG_Score_post','Prop_Unreliable_NewsG_Score'),
c('Prop_Reliable_NewsG_Score_post','Prop_Reliable_NewsG_Score'),
c('Count_Unreliable_NewsG_Score_post','Count_Unreliable_NewsG_Score'),
c('Count_Reliable_NewsG_Score_post','Count_Reliable_NewsG_Score'),
c('Average_domain_NewsG_Score_post','Average_domain_NewsG_Score'))
#Create list of Titles:
Titles <- c('Testing the Effect of the Intervention on Proportion of News Diet That is Unreliable with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Reliable with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st)',
'Testing the Effect of the Intervention on Count of Unreliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st)',
'Testing the Effect of the Intervention on Count of Reliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st)',
'Testing the Effect of the Intervention on Reliability Score of News Diet with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Unreliable with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Reliable with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st)',
'Testing the Effect of the Intervention on Count of Unreliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st)',
'Testing the Effect of the Intervention on Count of Reliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st)',
'Testing the Effect of the Intervention on Reliability Score of News Diet with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st)')
#Create list of filenames:
Tables_title <-  c('./Tables/Table_3.txt',
'./Tables/Table_4.txt',
'./Tables/Table_5.txt',
'./Tables/Table_6.txt',
'./Tables/Table_7.txt',
'./Tables/Table_8.txt',
'./Tables/Table_9.txt',
'./Tables/Table_10.txt',
'./Tables/Table_11.txt',
'./Tables/Table_12.txt')
#Create crosswalk for variables and display names:
top_attribute_names <- c("gender_dummy_fem",
"educ_score",
'Treated',
"Age",
"Age_Sq",
"party_score",
"race_white",
"ideo_score",
"Trust_Media_w1",
"trust_news",
"trust_news_sm",
"cons_news_n",
"cons_cable",
"cons_print",
"cons_public",
"cons_talk",
"cons_desk",
"cons_mobile",
"Safari_dummy",
"log_news",
'Prop_Unreliable_NewsG_Score',
'Prop_Reliable_NewsG_Score',
'Count_Unreliable_NewsG_Score',
'Count_Reliable_NewsG_Score',
'Average_domain_NewsG_Score',
'compliance_check_1',
'Complied',
"IE_dummy",
"Chrome_dummy",
"Firefox_dummy",
"Social_Media_Use")
top_attributes_html <- c('Gender',
'Education',
'Treatment',
'Age',
'Age-Squared',
"Party ID",
"Race/Ethnicity",
"Ideology ",
"Trust in Media",
"Trust of news in newspapers",
"Trust of news on social media ",
"News consumption (network news)",
"News consumption (cable news)",
"News consumption (print news) ",
"News consumption (public radio)",
"News consumption (talk radio)",
"News consumption (news on desktop)",
"News consumption (news on mobile)",
"Web Browser (Safari)",
"Log of news viewed",
'Pre-Treatment Value',
'Pre-Treatment Value',
'Pre-Treatment Value',
'Pre-Treatment Value',
'Pre-Treatment Value',
'Treatment',
'Treatment',
"Internet Explorer Browser",
"Chrome Browser",
"Firefox Browser",
"Social Media use")
names(top_attributes_html) <- top_attribute_names
#Run For loop to produce Tables 3-12:
list_text_models <- c('Proportion of News Diet That is Unreliable',
'Proportion of News Diet That is Reliable',
'Count of Unreliable News Consumed',
'Count of Reliable News Consumed',
'Avg. Reliability Score of News Diet',
'Proportion of News Diet That is Unreliable',
'Proportion of News Diet That is Reliable',
'Count of Unreliable News Consumed',
'Count of Reliable News Consumed',
'Avg. Reliability Score of News Diet')
Decile_Names <- c('Top 100 Percent',
'Top 30 Percent',
'Top 20 Percent',
'Top 10 Percent')
Deciles <- quantile(Pulse_data$Prop_Unreliable_NewsG_Score, prob = c(0.60,0.70,0.80,0.90),na.rm=T)
#Deciles <- quantile(Pulse_data$Average_domain_NewsG_Score, prob = c(0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9),na.rm=T)
Deciles[1]
x=10
i=5
for(i in 1:length(list_variables_to_run_1)){
list_possible_covariates_for_use <- c(list_variables_to_run_1[[i]],list_possible_covariates)
data_for_analysis <- Pulse_data %>% ungroup() %>% select(`list_possible_covariates_for_use`)
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
#Use glmnet lasso to choose covariates to be a part of model:
names_of_columns <- Lasso(data_for_analysis)
#names_of_columns
names_of_columns <- c('Treated',names_of_columns)
x=1
for(x in 1:length(Deciles)){
#Pulse_data_2 <- Pulse_data %>% filter(Prop_Unreliable_NewsG_Score >= Deciles[x])
Pulse_data_2 <- Pulse_data %>% filter(Prop_Unreliable_NewsG_Score >= Deciles[x])
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns)]
data_for_analysis <- Pulse_data_2[, names_use]
f <- paste0(list_variables_to_run_1[[i]][1], " ~ .")
ITT_Model <- lm_robust(as.formula(f), data = data_for_analysis)
names_of_columns_2 <- c(names_of_columns,'compliance_check_1')
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns_2)]
data_for_analysis <- Pulse_data_2[, names_use]
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
f <- paste0(list_variables_to_run_1[[i]][1], '~ . - Treated | . - compliance_check_1')
#CACE Model 1
CACE_Model_1 <- iv_robust(as.formula(f), data = data_for_analysis)
CACE_Model_1$term[which(CACE_Model_1$term == "compliance_check_11")] <- 'Treated'
# #CACE Model 2 - Passed first and second wave compliance check
names_of_columns_3 <- c(names_of_columns,'Complied')
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns_3)]
data_for_analysis <- Pulse_data_2[, names_use]
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
f <- paste0(list_variables_to_run_1[[i]][1], '~  . - Treated | . - Complied')
CACE_Model_2 <- iv_robust(as.formula(f), data = data_for_analysis)
CACE_Model_2$term[which(CACE_Model_2$term == "Complied")] <- 'Treated'
#names of the variables:
Variable_Names <- names(ITT_Model$coefficients)[-1]
Variable_Names <- str_replace_all(Variable_Names, top_attributes_html)
z=2
for(z in 1:length(names(coef(ITT_Model)))){
if(names(coef(ITT_Model))[z] == 'Treated'){
ITT_coef = round(coef(ITT_Model)[z],3)
ITT_SD = round(coef(summary(ITT_Model))[, "Std. Error"][z],3)
ITT_P = coef(summary(ITT_Model))[, "Pr(>|t|)"][z]
}
}
for(z in 1:length(names(coef(CACE_Model_1)))){
if(names(coef(CACE_Model_1))[z] == 'compliance_check_11'){
C_1_coef = round(coef(CACE_Model_1)[z],3)
C_1_SD = round(coef(summary(CACE_Model_1))[, "Std. Error"][z],3)
C_1_P = coef(summary(CACE_Model_1))[, "Pr(>|t|)"][z]
}
}
for(z in 1:length(names(coef(CACE_Model_2)))){
if(names(coef(CACE_Model_2))[z] == 'Complied'){
C_2_coef = round(coef(CACE_Model_2)[z],3)
C_2_SD = round(coef(summary(CACE_Model_2))[, "Std. Error"][z],3)
C_2_P = coef(summary(CACE_Model_2))[, "Pr(>|t|)"][z]
}
}
Stars_I_1 = ''
if(ITT_P < 0.05){
Stars_I_P = '*'
}
if(ITT_P < 0.01){
Stars_I_P = '**'
}
if(ITT_P < 0.001){
Stars_I_P = '***'
}
Stars_C_1 = ''
if(C_1_P < 0.05){
Stars_C_1 = '*'
}
if(C_1_P < 0.01){
Stars_C_1 = '**'
}
if(C_1_P < 0.001){
Stars_C_1 = '***'
}
Stars_C_2 = ''
if(C_2_P < 0.05){
Stars_C_2 = '*'
}
if(C_2_P < 0.01){
Stars_C_2 = '**'
}
if(C_2_P < 0.001){
Stars_C_2 = '***'
}
ITT_1 <- paste0(ITT_coef,'(',ITT_SD,')',Stars_I_1)
CACE_1 <- paste0(C_1_coef,'(',C_1_SD,')',Stars_C_1)
CACE_2 <- paste0(C_2_coef,'(',C_2_SD,')',Stars_C_2)
Prop_F <- as.character(round(Deciles[x],3))
print(c(Decile_Names[x],Prop_F,ITT_1,CACE_1,CACE_2))
}
#<- rbind(,Prop_F,ITT_1,CACE_1,CACE_2))
#list_text_models[i]
}
#Create list of Titles:
Titles <- c('Testing the Effect of the Intervention on Proportion of News Diet That is Unreliable with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Reliable with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Count of Unreliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Count of Reliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Reliability Score of News Diet with Covariate-Adjusted Models (HC2 Robust standard errors) (Before July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Unreliable with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Proportion of News Diet That is Reliable with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Count of Unreliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Count of Reliable News Consumed with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)',
'Testing the Effect of the Intervention on Reliability Score of News Diet with Covariate-Adjusted Models (HC2 Robust standard errors) (After July 1st) on Different Samples of Respondents by Decile of their Quality of News Consumption Pre-Treatment (Average Reliability Score of News)')
Decile_Names <- c('Bottom 10 Percent',
'Bottom 20 Percent',
'Bottom 30 Percent',
'Bottom 40 Percent',
'Bottom 50 Percent',
'Bottom 60 Percent',
'Bottom 70 Percent',
'Bottom 80 Percent',
'Bottom 90 Percent')
Table_File <- c('./Tables/Table_Deciles_1.txt',
'./Tables/Table_Deciles_2.txt',
'./Tables/Table_Deciles_3.txt',
'./Tables/Table_Deciles_4.txt',
'./Tables/Table_Deciles_5.txt',
'./Tables/Table_Deciles_6.txt',
'./Tables/Table_Deciles_7.txt',
'./Tables/Table_Deciles_8.txt',
'./Tables/Table_Deciles_9.txt',
'./Tables/Table_Deciles_10.txt')
Deciles <- quantile(Pulse_data$Average_domain_NewsG_Score, prob = c(0.1,0.2,0.3,0.4,0.5,0.60,0.70,0.80,0.90),na.rm=T)
#Deciles <- quantile(Pulse_data$Average_domain_NewsG_Score, prob = c(0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9),na.rm=T)
#i=5
#i=1
for(i in 1:length(list_variables_to_run_1)){
list_possible_covariates_for_use <- c(list_variables_to_run_1[[i]],list_possible_covariates)
data_for_analysis <- Pulse_data %>% ungroup() %>% select(`list_possible_covariates_for_use`)
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
#Use glmnet lasso to choose covariates to be a part of model:
names_of_columns <- Lasso(data_for_analysis)
#names_of_columns
names_of_columns <- c('Treated',names_of_columns)
new_matr <- matrix(ncol=6)
#x=1
#x=2
for(x in 1:length(Deciles)){
#Pulse_data_2 <- Pulse_data %>% filter(Prop_Unreliable_NewsG_Score >= Deciles[x])
Pulse_data_2 <- Pulse_data %>% filter(Average_domain_NewsG_Score <= Deciles[x])
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns)]
data_for_analysis <- Pulse_data_2[, names_use]
data_for_analysis <- Clean(data_for_analysis)
f <- paste0(list_variables_to_run_1[[i]][1], " ~ .")
ITT_Model <- lm_robust(as.formula(f), data = data_for_analysis)
names_of_columns_2 <- c(names_of_columns,'compliance_check_1')
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns_2)]
data_for_analysis <- Pulse_data_2[, names_use]
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
f <- paste0(list_variables_to_run_1[[i]][1], '~ . - Treated | . - compliance_check_1')
#CACE Model 1
CACE_Model_1 <- iv_robust(as.formula(f), data = data_for_analysis)
CACE_Model_1$term[which(CACE_Model_1$term == "compliance_check_11")] <- 'Treated'
# #CACE Model 2 - Passed first and second wave compliance check
names_of_columns_3 <- c(names_of_columns,'Complied')
names_use <- names(Pulse_data_2)[(names(Pulse_data_2) %in% names_of_columns_3)]
data_for_analysis <- Pulse_data_2[, names_use]
#Clean Data:
data_for_analysis <- Clean(data_for_analysis)
f <- paste0(list_variables_to_run_1[[i]][1], '~  . - Treated | . - Complied')
CACE_Model_2 <- iv_robust(as.formula(f), data = data_for_analysis)
CACE_Model_2$term[which(CACE_Model_2$term == "Complied")] <- 'Treated'
#names of the variables:
Variable_Names <- names(ITT_Model$coefficients)[-1]
Variable_Names <- str_replace_all(Variable_Names, top_attributes_html)
for(z in 1:length(names(coef(ITT_Model)))){
if(names(coef(ITT_Model))[z] == 'Treated'){
ITT_coef = round(coef(ITT_Model)[z],3)
ITT_SD = round(coef(summary(ITT_Model))[, "Std. Error"][z],3)
ITT_P = coef(summary(ITT_Model))[, "Pr(>|t|)"][z]
}
}
for(z in 1:length(names(coef(CACE_Model_1)))){
if(names(coef(CACE_Model_1))[z] == 'compliance_check_11'){
C_1_coef = round(coef(CACE_Model_1)[z],3)
C_1_SD = round(coef(summary(CACE_Model_1))[, "Std. Error"][z],3)
C_1_P = coef(summary(CACE_Model_1))[, "Pr(>|t|)"][z]
}
}
for(z in 1:length(names(coef(CACE_Model_2)))){
if(names(coef(CACE_Model_2))[z] == 'Complied'){
C_2_coef = round(coef(CACE_Model_2)[z],3)
C_2_SD = round(coef(summary(CACE_Model_2))[, "Std. Error"][z],3)
C_2_P = coef(summary(CACE_Model_2))[, "Pr(>|t|)"][z]
}
}
Stars_I_P = ''
if(ITT_P < 0.05){
Stars_I_P = '*'
}
if(ITT_P < 0.01){
Stars_I_P = '**'
}
if(ITT_P < 0.001){
Stars_I_P = '***'
}
Stars_C_1 = ''
if(C_1_P < 0.05){
Stars_C_1 = '*'
}
if(C_1_P < 0.01){
Stars_C_1 = '**'
}
if(C_1_P < 0.001){
Stars_C_1 = '***'
}
Stars_C_2 = ''
if(C_2_P < 0.05){
Stars_C_2 = '*'
}
if(C_2_P < 0.01){
Stars_C_2 = '**'
}
if(C_2_P < 0.001){
Stars_C_2 = '***'
}
ITT_1 <- paste0(ITT_coef,' (',ITT_SD,')',Stars_I_P)
CACE_1 <- paste0(C_1_coef,' (',C_1_SD,')',Stars_C_1)
CACE_2 <- paste0(C_2_coef,' (',C_2_SD,')',Stars_C_2)
Prop_F <- as.character(round(Deciles[x],3))
Num_Obs <- nrow(data_for_analysis)
new_matr <- rbind(new_matr,c(Decile_Names[x],Prop_F,ITT_1,CACE_1,CACE_2,Num_Obs))
}
colnames(new_matr) <- c('Decile','Threshold','ITT Model','CACE Model (Weak Compliance Measure)','CACE Model (Strong Compliance Measure)','Sample Size')
new_matr <- new_matr[-1,]
#Create Xtable Object:
xt <- xtable(new_matr,
digits=2,
caption= Titles[i],
align=c(
"p{1cm}|","|p{3.5cm}|",
"p{1.5cm}|","p{3cm}|","p{3cm}|","p{3cm}|","p{2cm}|"))
write(print.xtable(xt,
include.rownames=FALSE,
sanitize.colnames.function = identity,
caption.placement='top',
add.to.row = list(list(nrow(new_matr)),"\\hline \\multicolumn{5}{l}{\\scriptsize{$^{***}p<0.001$; $^{**}p<0.01$; $^{*}p<0.05$}} \\\\ ")),
file=Table_File[i])
}
Pulse_data_2 <- Pulse_data %>% filter(Average_domain_NewsG_Score <= Deciles[1])
3.71/mean(Pulse_data_2$Average_domain_NewsG_Score)
5.86/mean(Pulse_data_2$Average_domain_NewsG_Score)
#Distributions:
ggplot(Pulse_data, aes(x=Average_domain_NewsG_Score)) +
geom_density(color="lightblue", fill="lightblue") +
xlab("\n Average NewsGuard Reliability Score") +
ylab("Density \n") +
theme_classic() +
theme(axis.title.x = element_text(size=16),
axis.text.x  = element_text(size=16),
axis.title.y = element_text(size=16),
axis.text.y  = element_text(size=16),
plot.title = element_text(size = 16),
legend.title = element_text(size=16),
legend.text = element_text(size=14)) +
xlim(min(Pulse_data$Average_domain_NewsG_Score,na.rm=T)
,max(Pulse_data$Average_domain_NewsG_Score,na.rm=T))
ggsave('./Figures/NewsG_Score_Dist.png',height=12,width=10)
ggplot(Pulse_data, aes(x=Prop_Unreliable_NewsG_Score)) +
geom_density(color="lightblue", fill="lightblue") +
xlab("\n Proportion of News Diet Rated as Unreliable      ") +
ylab("Density \n") +
theme_classic() +
theme(axis.title.x = element_text(size=16),
axis.text.x  = element_text(size=16),
axis.title.y = element_text(size=16),
axis.text.y  = element_text(size=16),
plot.title = element_text(size = 16),
legend.title = element_text(size=16),
legend.text = element_text(size=14)) +
xlim(0,1)
ggsave('./Figures/NewsG_Unreliable_Dist.png',height=12,width=10)
ggplot(Pulse_data, aes(x=Average_domain_NewsG_Score)) +
geom_density(color="lightblue", fill="lightblue") +
xlab("\n Average NewsGuard Reliability Score") +
ylab("Density \n") +
theme_classic() +
theme(axis.title.x = element_text(size=16),
axis.text.x  = element_text(size=16),
axis.title.y = element_text(size=16),
axis.text.y  = element_text(size=16),
plot.title = element_text(size = 16),
legend.title = element_text(size=16),
legend.text = element_text(size=14)) +
xlim(0,100)
ggsave('./Figures/NewsG_Score_Dist.png',height=12,width=10)
